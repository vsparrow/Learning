Skills:
HTML, CSS and Bootstrap skills.


HTML  
<!-- -->  #are for comments
Nesting just means putting one element inside of another element.
<a href=#> Replace the value of your a element's href attribute with a #, also known as a hash symbol, to turn it into a dead link.
  <a href="" target="_blank">  opens in new window
<ul></ul>               #unordered lists
<ol></ol>               #ordered lists
<input type="text" placeholder="cat photo URL">  #input with placeholder texxt
<form action="/submit-cat-photo">
  <input type="text" placeholder="cat photo URL">
  <button type="submit">Submit</button>
</form>
<hr> horizontal bar
<strong> tag is a phrase tag. It defines important text.
<blockquote> tag specifies a section that is quoted from another source. ie: <blockquote cite="http://www.worldwildlife.org/who/index.html"></blockquote>
      if <footer> is inside blockquote it creates an emdash  (long dash)
      <cite> used in blockquote applies <em> to text, italisizes
The div element, also known as a division element, is a general purpose container for other elements.
The div element is probably the most commonly used HTML element of all. It's useful for passing the CSS of its own class declarations down to all the elements that it contains.
  <div class="row">  all elements within are to be in 1 row
<id>  each HTML element can also have an id attribut # <h2 id="cat-photo-app"> 
                        #decleare in style    #cat-photo-app {color: green;}     we use # for id, and . for class
                        id attribute will always take precedence of class
padding # UPDOWN An element's padding controls the amount of space between the element and its border.
padding: 10px 20px 10px 20px; #These four values work like a clock: top, right, bottom, left, Instead of specifying an element's padding-top, padding-right, padding-bottom, and padding-left
margin # LEFTRIGHTUPDOWN An element's margin controls the amount of space between an element's border and surrounding elements.
      #If you set an element's margin to a negative value, the element will grow larger.
margin: 10px 20px 10px 20px;
Every HTML page has a body element. you can style your body element just like any other HTML element, and all your other elements  inherit your body element's styles.
COLOR HEX: Hex code follows the red-green-blue, or rgb format. The first two digits of hex code represent the amount of red in the color. The third and fourth digit represent the amount of green. The fifth and sixth represent the amount of blue.
rgb(255, 255, 255) Another way you can represent colors in CSS. specify the brightness of each color with a number between 0 and 255. instead of using hex
FONTandICONS
  Font Awesome is a convenient library of icons. <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"/>
               <i class="fa fa-info-circle"></i>  
               i element was originally used to make other elements italic, but is now commonly used for icons. 
               You add the Font Awesome classes to the i element to turn it into an icon,
table
  The <caption> tag defines a table caption.The <caption> tag must be inserted immediately after the <table> tag. class="caption"

image:
    make image fit some size : <img src="logo.png" width="27px">







Style:
#Note that inside your style element, you always reference classes by putting a . in front of their names. 
#You always reference ids by putting a # in front of their names.
font-family: Sans-serif,Monospace;    #use certain fonts. if sans isnt available degrade to use Monospace.
  #there are 3 fonts in all browser:  Monospace, Serif and Sans-Serif
.red-text {color: red;}     #anything with red-textlabe red,
font-size: 16px;            #font sizing
externalfonts: <link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">
width: 500px;               #image width 500px
border-radius: 10px;        #round out those corners
border-radius: 50%;         #create circle of the image
box around image          
  border-color: red;  
  border-width: 5px;
  border-style: solid;
class="class1 class2" # It doesn't matter which order the classes are listed in the HTML element. see example to left
                        #However, the order of the class declarations in the <style> section are what is important. 
                        #The second declaration will always take precedence over the first.. 
                        #ie if class1 comes after class2 in style declaration, class1 will take precedence, even if class2 applied after in html element
                        #, in the event of a conflict, the browser will use whichever CSS declaration came last.
inline    <h2 style="color: red"></h2> #changes everything in the h2 element red.  #this is inline style
                        # in-line styles will override all the CSS declarations in your style elemen
!important  This is the most powerful method of all.when you absolutely need to be sure that an element has specific CSS, 
                        # color: red !important;




css
<style>  h2 {color: blue;} </style>   #everything with the label h2 will be blue
inline    <h2 style="color: red"></h2>  #see also style above
<h2>CatPhotoApp</h2>
#CSS Classes are reusable styles that can be added to HTML elements.
#Note that in your CSS style element, classes should start with a period. 
#In your HTML elements' class declarations, classes shouldn't start with a period.
<style> 
 .red-text {color: red;}    ##anything with red-textlabe red,
  p {font-size: 16px;}      #anything in p is 16px
</style>  
<h2 class="red-text">CatPhotoApp</h2>
Remember that you can apply multiple classes to an element by separating each class with a space within its class attribute. 
<img class="class1 class2">
span element, you can put several elements together, and even style different parts of the same element differently.
Bootstrap   #responsive CSS framework. Bootstrap will figure out how wide your screen is and respond by resizing your HTML elements - 
            #hence the name Responsive Design. no need to design a mobile version of your website. It will look good on devices with screens of any width.
            add bootstrap: <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css"/>
            Autoresize pics: <img src="https://bit.ly/fcc-running-cats" class="img-responsive">
            Autoresize page: <div class="container-fluid">
            Button :   <button class="btn">Like</button>
            Button Block : <button class="btn btn-block">Like</button> your button will stretch to fill your page's entire horizontal space
            Bootstrap comes with several pre-defined colors for buttons.
              Button Primary: <button class="btn btn-block btn-primary">Like</button>  useful for highlighting actions you want your user to take.
              Button Info : btn-info class is used to call attention to optional actions that the user can take
              Button Danger: btn-danger class is the button color you'll use to notify users that the button performs a destructive action, such as deleting a cat photo.
            Containers : Bootstrap requires a containing element to wrap site contents and house our grid system. You may choose one of two containers to use in your projects. 
              Note that, due to padding and more, neither container is nestable
              Use .container for a responsive fixed width container. <div class="container">
              Use .container-fluid for a full width container, spanning the entire width of your viewport. <div class="container-fluid">
            Forms:
              form-control class:
                All textual <input>, <textarea>, and <select> elements with class .form-control have a width of 100%.
            Grid: Put the Like, Info and Delete buttons side-by-side by nesting all three of them within one <div class="row"> element, then each of them within a <div class="col-xs-4"> element.
              ex  <div class="row"><div class="col-xs-4">each items gets its own inner div</div></div>
              col can be col-xs-* for phones col-med-* for laptops etc.
                see: http://getbootstrap.com/css/ for visual examples
                offset  Move columns to the right using .col-md-offset-* classes. 
                These classes increase the left margin of a column by * columns.
                    .col-md-offset-4 moves .col-md-4 over four columns.  <div class="col-md-4 col-md-offset-4">.col-md-4 .col-md-offset-4</div>
              12-column grid layout,  * is a number specifying how many columns wide the element should be
              You can use Bootstrap's col-xs-* classes on form elements, too! 
                "well" class that can create a visual sense of depth for your columns.
                  <div class="col-xs-6"><div class="well"></div></div>
                  
            image : img-responsive   
              .thumbnail  class shapes the image to a thumbnail:  <a href="pulpitrock.jpg" class="thumbnail">
            Text: Center text: <h2 class="text-center">CatPhotoApp</h2>


jQuery, the most popular JavaScript tool of all time.
    #Your browser will run any JavaScript inside a script element, including jQuery.
    All jQuery functions start with a $
    function chaining  involves sticking two jQuery functions together 
    Note that jQuery is zero-indexed, meaning that, counter-intuitively, :odd selects the second element, fourth element, and so on.
    Elements
      Class just like with CSS declarations, you type a . before the class's name.
      ID Note that, just like with CSS declarations, you type a # before the id's name.
      Now you know three ways of targeting elements: by type: $("button"), by class: $(".btn"), and by id $("#target1").
        
    <script>$(document).ready(function(){$("button").addClass("animated");});</script>
              #without your document ready function, your code may run before your HTML is rendered, which would cause bugs.
    selector  #jQuery often selects an HTML element with a selector, then does something to that element.
    Bounce:  $("button").addClass("animated bounce"); #select button, add class bounce to element button
    Shake addClass("animated Shake");
    fadeout addClass("animated fadeOut");
      // $("button").addClass("animated bounce");  target button 
      // $(".well").addClass("animated shake");   target class well
      // $("#target3").addClass("animated fadeOut");  target id named target3

  Class
    addClass $(".btn").addClass("shake");; you can add classes to an element with jQuery's addClass() function, 
    removeClass $("#target2").removeClass("btn-default") you can remove them with jQuery's removeClass() function.
  CSS
    change css of a target:   $("#target1").css("color","red");
  Element
    .prop() change the non-CSS properties of HTML elements.  allows you to adjust the properties of elements.
      $("button").prop("disabled", true); Here's how you would disable all buttons:
    .html()  change the text between the start and end tags of an element. You can even change HTML markup.
      ex: $("h3").html("<em>jQuery Playground</em>"); rewrite h3
    .text   like .html but that only alters text without adding tags.
    .remove remove an HTML element entirely      $("#target4").remove()
    .appendTo llows you to select HTML elements and append them to another element.
          ex  $("#target4").appendTo("#left-well");  move target4 from our right well to our left well, 
    .clone() that makes a copy of an element. $("#target2").clone().appendTo("#right-well");  copy target2 from our left-well to our right-well, 
    .parent() that allows you to access the parent of whichever element you've selected.
      ex $("#left-well").parent().css("background-color", "blue")  give parent element of the left-well element a background color blue:
    .children() that allows you to access the children of whichever element you've selected.
      ex $("#left-well").children().css("color", "blue")  give the children of your left-well element the color of blue:
    target:nth-child(n) css selector allows you to select all the nth elements with the target class or element type.
      ex $(".target:nth-child(3)").addClass("animated bounce"); give the third element in each well the bounce class:
      ODD/EVEN 
        ex $(".target:odd").addClass("animated shake"); target all the odd-numbered elements with class target and give them classes
          Note that jQuery is zero-indexed, meaning that, counter-intuitively, :odd selects the second element, fourth element, and so on.
      $(".well :nth-child(2)").addClass("animated bounce");  add space betweek .well and : if not working
        https://github.com/FreeCodeCamp/FreeCodeCamp/issues/1927#issuecomment-132369084
  

javascript:
JavaScript Variables:   var ourName;   //this is a declaration of a variable
  When JavaScript variables are declared, they have an initial value of undefined.
  Write variable names in Javascript in camelCase
NaN If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number
  If you concatenate a string with an undefined variable, you will get a literal string of "undefined".
floats  Decimal numbers are sometimes referred to as floating point numbers 
% remainder operator: very similar to modulus, but does not work properly with negative numbers.
Compound Assignment   x+=2; x-=2; x*=2; x/=2;
string literal. a series of zero or more characters enclosed in single or double quotes. "your name"
when you need a literal quote: " or '  you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.
  var sampleStr = "Alan said, \"Peter is learning JavaScript\".";
"" ''  single and double quotes are functionally identical in JavaScript.  
  in JS if you start with one type of quote you dont need to escape the other type of quote
    ex 'This string has "double quotes" in it. And "probably" lots of them.'
        var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';
String
  String values are immutable, which means that they cannot be altered once created. 
    the only way to change is assign the var a new string
  .length  find the length of a String value 
array
  Multi-dimensional Array   nest arrays within other arrays, like this: [["Bulls", 23], ["White Sox", 45]].
  push: An easy way to append data to the end of an array is via the push()   arr.push(4);  myArray.push(["dog",3]);
  .pop() is used to "pop" a value off of the end of an array.   ex var oneDown = [1, 4, 6].pop();  array1.pop();
  .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.
  .unshift() works exactly like .push(), but instead unshift() adds the element at the beginning of the array.
Function
  function reusableFunction(){ console.log("Hi World");}
  scope refers to the visibility of variables. 
    Global:Variables defined outside of a function block have Global scope. means, they can be seen everywhere in your JavaScript code.
      Variables which are used without the var keyword are automatically created in the global scope.
    Local: Variables declared within a function, as well as the function parameters have local scope. That means, they are only visible within that function.
