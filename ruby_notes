ruby .rb files

Addition (+)
Subtraction (-)
Multiplication (*)
Division (/)
Exponentiation (**)
Modulo (%)
[1.2,2.2].floor # [1,2] method rounds a float (a number with a decimal) down to the nearest integer. 
puts  -3.abs # return 3 gets abosolute of number
puts rand # RANDOM If you call rand just like that, you'll get a float greater than or equal to 0.0 and less than 1.0
puts rand(5) # If you give rand an integer (5 for example), it will give you an integer greater than or equal to 0 and less than 5 (so five possible numbers, from 0 to 4). 
srand 1776 # ant rand to return the same random numbers in the same sequence on two different runs of your program.  you need to set the seed, 
#NOTE: call srand without puts if you want the same number ftom the seed, ie if you call puts srand 1776 the NEXT rand will be seeded with 1776
srand 0 #s seeds it with a really weird number, using (among other things) the current time on your computer, down to the millisecond.


puts adds a newline to the end of the output. print does not.  

.. vs ... # ..creates an inclusive range, while ... creates a range that excludes the specified high value.


 CRUD, for create, read, update, and delete (respectively). These are the actions you take when you update an entry in a database, ask a website for information, or write a blog post. 

returns: Ruby's methods will return the result of the last evaluated expression if return not defined


###STRING ###STRING ###STRING ###STRING ###STRING ###STRING ###STRING ###STRING 
#---------------------------------------------------------------------------------------
"string".length #get length of string ie: 5
"string".reverse #get reverse of string, ie: gnirts
"string".upcase #convert string to upper case ie: STRING
"String".downcase #convert to lowercase, ie: "string"
"strinG".capitalize #Uppercase first char, lowercase other chars ie: "String"
"strinG".captitalize! # ! modifies variable so that its permanantly set
if user_input.include? "s"   # finds char "s" and replaces it with "th"
    user_input.gsub!(/s/,"th")
string.include? "s" #evaluates to true if it finds "s" and false otherwise.
string.gsub!(/s/,"th") # global substitution method, here substitute all "s" for "th"
string.split(",") #  takes string returns array. use text in parentheses as  delimiter
number.to_s # takes number converts to string
"I love " + "drink" # becomes " I love drink"
"I love " << drink # same as above, here if drink is variable = chai, "I love chai"

#justify/center strings      str='--> text <--'  and lineWidth=50
puts('And scared her shoe sized dog away'.center(lineWidth)) #Centers str in width.
puts str.ljust  lineWidth # prints  --> text <--                                                left justify
puts str.center lineWidth # prints              --> text <--                                    center
puts str.rjust  lineWidth # prints                           --> text <--                       right justify
puts str.ljust(lineWidth/2) + str.rjust(lineWidth/2) #prints --> text <--      --> text <--     prints both at each justication

comments:
# for single line comments
for multiline comments see below: anything inbetween commented out. open and close must be in all on own, nothing else can be added
=begin
=end

#variables  #variables #variables #variables #variables #variables #variables #variables #variables #variables 
#------------------------------------------------------------------------------------------------------------
convention #variables start with lowercase letter and words should be separated by underscores, like counter and masterful_method
variable_y = gets.chomp #assign variable to user input, Ruby adds newline after each bit of input; chomp removes that extra line. 
#{variable_y}  #use variable in print : print "Your input of #{variable_y} is cool" 
variable_y =Integer(user.chomp) # the variable HAS to be an int
item1 <=> item 2 # combined comparison operator  compare two Ruby objects.  returns 0 if the first operand (item to be compared) equals the second, 1 if first operand is greater than the second, and -1 if the first operand is less than the second
puts "string".object_id #  .object_id method gets the ID of an objectâ€”it's how Ruby knows whether two objects are the exact same object

 #variable types
 you can have variables that are available everywhere (global variables), $
 ones that are only available certain methods (local variables), 
 others that are members of a certain class (class variables), @@
 and variables that are only available to particular instances of a class (instance variables). @

some variables start with $, @, or @@? This helps mark them as global, instance, and class variables (respectivel
#arrays #arrays #arrays #arrays #arrays #arrays #arrays #arrays #arrays #arrays 
#-----------------------------------------------------------------------------
my_array=[1,2,3,4,5]    # Array
my_array.sort           # will sort array
books.sort! { |firstBook, secondBook| firstBook <=> secondBook } ## To sort our books in ascending order, in-place , default
books.sort! {|book1,book2| book2 <=> book1} ## Sort your books in descending order, in-place below
my_array.reverse!       #reverse sort
s.each { |x|  x.each {|y| puts "#{y}" }}   #print out each item of multi-demensional array
my_array.collect { |num| num ** 2 } # return 2 4 9 16 25 : takes code block and applies the expression in the block to every element in an array. 

#hash #hash #hash #hash #hash #hash #hash #hash #hash #hash #hash #hash #hash #hash 
#---------------------------------------------------------------------------------
# hashes are just collections of key-value pairs, where a unique key is associated with some value.
# keys must be unique, but values can repeat. (That's why we can have more than one key share the value "cat."
# create hash : hash literal notation       :   new_hash = { "one" => 1 }
# create hash : hash constructor notation   :   new_hash = Hash.new
my_hash=Hash.new            # same as my_hash={}
my_has["Stevie"] = "cat"    # add a hash : if print my_hash["Stevie"] output is "cat"
no_nil_hash=Hash.new(0) # The first time we find the word, it will have a default value of 0 rather than default of nil


colors = colors.sort_by do |color, count| # sort from smallest to largest by count. sort_by function returns an array of arrays
    count
end
colors = colors.sort_by { |color, count| count} #same as above


my_hash = { "name" => "Eric",  #hash is a collection of key-value pairs. 
  "age" => 26,
  "hungry?" => false
} 
my_hash.each {|x,y| "puts #{x}:#{y}" }  # will print name:Eric  age:26  hungry:false



#Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression 
#--------------------------------------------------------------------------------

if expression   # if statments always finsih with an "end" statement
  dosomething #The block of code following an if should be indented two spaces. formatting a should not a must
elsif expression2
  dosomething2
else
  dosomething3
end

#one line if
puts "It's true!" if true # BUT CANNOT DO THIS -> if true puts "It's true!"

#ternary conditional expression
boolean ? Do this if true: Do this if false #example: puts 3 < 4 ? "3 is less than 4!" : "3 is not less than 4."


unless  some_false_variable    #continue if not true expression; its like "if not true" ; same syntax as if
  doexpression
end

problem = false
print "Good to go!" unless problem
Remember, this is basically a short hand if statement. It will do whatever you ask unless the condition is true. 
In our example, problem is false, so we don't have a problem. We print Good to go!

boolean: # 3 operators && ||  !


#CASE
case language
when "JS"
  puts "Websites!"
else
  puts "I don't know!"
end

#CASE ALTERNATE
case language
  when "JS" then puts "Websites!"
  else puts "I don't know!"
end

#conditional assignment operator: ||=    only want to assign a variable if it hasn't already been assigned? 
favorite_book = nil
favorite_book ||= "Cat's Cradle" #now cats cradle because was before nil
favorite_book ||= "Why's (Poignant) Guide to Ruby" # still cats cradle because favbook NOT nil
favorite_book = "Why's (Poignant) Guide to Ruby" # now wpgtr because of assignment operator







# LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS 
# ---------------------------------------------------------------------------------------------------------

until some_statement_is_true
  do this
end

loop do
    something
end

for i in 1..3
    print i
end

30.times do |x|
    print "Ruby!"
end

letters = ['a', 'b', 'c', 'd']
letters.each do |letter|
  print letter
end


object.each { |item| # Do something } # between | |  anything, placeholder for each element of the object "each" used on.
object.each do |item| # Do something end 
2.times {puts "COOL"} # .times method compact for loop:  perform  task on each item in an object a specified number of times.

break if i > 5 # when in loop will break if i > 5
next if i % 2 == 0  #in loop skip to next iteration if state true, ie: if even number go to next iteration


#function #function #function #function #function #function #function #function #function #function #function #function #function #function 
#----------------------------------------------------------------------------------------------------------------------
#argument: piece of code you actually put between the method's parentheses when you call it  Here its 12
#parameter: parameter is the name you put between the method's parentheses when you define it. parameter here is n 
#splat arguments. Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there are about to be, but it could be more than one."
#blocks think of blocks as a way of creating methods that don't have a name. (These are similar to anonymous functions in JavaScript or lambdas in Python.)

1.times do
  puts "I'm a code block!"
end
1.times { puts "As am I!" }

#LAMBDAS AND PROCS #LAMBDAS AND PROCS #LAMBDAS AND PROCS #LAMBDAS AND PROCS #LAMBDAS AND PROCS #LAMBDAS AND PROCS #LAMBDAS AND PROCS 
#-----------------------------------------------------------------------------------------------------------

# lambda vs proc: a lambda checks the number of arguments passed to it, while a proc does not. 
# lambda will throw an error if you pass it the wrong number of arguments, whereas a proc will ignore unexpected arguments and assign nil to any that are missing.
# Second, when a lambda returns, it passes control back to the calling method; when a proc returns, it does so immediately, without going back to the calling method.

#LAMBDA    defined as lambda { |param| block }
def lambda_demo(a_lambda)     #example
  puts "I'm the method!"
  a_lambda.call          #prints "I'm the lambda"
end
lambda_demo(lambda { puts "I'm the lambda!" }) #almost same as lambda_demo(Proc.new {puts "I'm the lambda"})

#lambda2 example
strings = ["leonardo", "donatello", "raphael", "michaelangelo"]
symbolize =lambda {|x| x.to_sym}
symbols = strings.collect(&symbolize) # get [:leonardo, :donatello, :raphael, :michaelangelo] can use map instead of collect

#lambda vs proc example:

def batman_ironman_proc
  victor = Proc.new { return "Batman will win!" } #returns to caller
  victor.call
  "Iron Man will win!"
end
#batman will win
puts batman_ironman_proc
#the proc says Batman will win? This is because it returns immediately, without going back to the batman_ironman_proc method.

def batman_ironman_lambda
  victor = lambda { return "Batman will win!" } #returns to method
  victor.call
  "Iron Man will win!"
end
#ironman will win
puts batman_ironman_lambda
#lambda, however, goes back into the method after being called, so the method returns the last code it evaluates: "Iron Man will win!"


#symbols #symbols #symbols #symbols #symbols #symbols #symbols #symbols #symbols #symbols #symbols #symbols 
#--------------------------------------------------------------------------------------------------------
primarily used either as hash keys or for referencing method names. 
Symbols make good hash keys for a few reasons:
    They're immutable, meaning they can't be changed once they're created;
    Only one copy of any symbol exists at a given time, so they save memory;
    Symbol-as-keys are faster than strings-as-keys because of the above two reasons.
.to_s #convert between strings and symbols The .to_s and .to_sym methods are what you're looking for!
.to_sym # to symbol
.to_i #to integer
.intern #This will internalize the string into a symbol and works just like .to_sym:
.to_a  # takes range of objects and turns it into array of objects
good_movies = movie_ratings.select {|movie,rating| rating > 3} # select function
.each_key #my_hash.each_key { |k| print k, " " }
.each_value # my_hash.each_value { |v| print v, " " }

add values:
movies.store(title,rating) 
movies[title]=rating

delete values:
movies.delete(title)

#calls #calls  #calls #calls #calls #calls #calls #calls #calls #calls #calls #calls #calls #calls #calls #calls 
#------------------------------------------------------------------------------------------------------------

strings = ["1", "2", "3"]
nums = strings.map(&:to_i)
# ==> [1, 2, 3]

#class 
#-----------------------------------------------------------------

#A class is just a way of organizing and producing objects with similar attributes and methods.
#By convention, class names start with a capital letter and use CamelCase instead of relyingonunderscores.
# started ourclass definition off with a method called initialize. You can think of initialize as the function that "boots up" each object the class creates.
# @ before a variable to signify that it's an instance variable. This means that the variable is attached to the instance of the class.
#public Public methods allow for an interface with the rest of the program; they say, "Hey! Ask me if you need to know something about my class or its instances."
#private Private methods, on the other hand, are for your classes to do their own work undisturbed. They don't want anyone asking them anything, so they make themselves unreachable!




class Creature  #ParentClass
    @@creature_count=0 #global variable 
    def initialize(name)  #all class need to intialize
        @name=name
        @@creature_count +=1  #adds to global count
    end
    def fight             #method of class Creature
        return "Punch to the chops!"
    end
end #end class Creature


#Any given Ruby class can have only one superclass.(Parent)
class Dragon < Creature  #start ChildClass < ParentClass #Inherhit : child inherit all methods from parent
    def fight            #OVERRIDE PARENT"S method
        return "Breathes fire!"
    end
end


class Person
  attr_reader :name  #now we can access and read @name using :name
  attr_writer :name   #now we can access and write @name using :name
  attr_accessor :job   # like read and write in one
  def initialize(name,job)
    @name = name
    @job=job
  end
end


#modules #modules #modules #modules #modules #modules #modules #modules #modules #modules #modules #modules #modules #modules #modules #modules 
#-----------------------------------------------------------------------------------------

#module  a toolbox that contains a set methods and constants.
#You can think of modules as being very much like classes, only modules can't create instances and can't have subclasses.
#They're just used to store things!
#Like class names, module names are written in CapitalizedCamelCase, rather than lowercasewithunderscores.
#. Ruby constants are written in ALL_CAPS and are separated with underscores if there's more than one word.

Math::PI and Circle::PI
#scope resolution operator, which is a fancy way of saying it tells Ruby where you're looking for a specific bit of code. 
#If we say Math::PI, Ruby knows to look inside the Math module to get that PI, not any other PI (such as the one we created in Circle).

puts Math::PI  #print constant PI from module Math
require "Module_name" #bring in modules that are not installed with interpretor
include "Module_name" #you no longer have to prepend your constants and methods with the module nam write PI instead of Math::PI

Mixin #When module is used to mix additional behavior/info into a class,  called a mixin. customize a class without having to rewrite code!
module Action; def jump; puts "I jumped" end;end
class Cat; include Action; end
peter=Cat.new
peter.jump   # see how class cat, peter, inherited jump from Action

extend #keyword mixes a module's methods at the class level. 
#This means that class itself can use the methods, as opposed to instances of the class

# ThePresent has a .now method that we'll extend to TheHereAnd
module ThePresent
  def now
    puts "It's #{Time.new.hour > 12 ? Time.new.hour - 12 : Time.new.hour}:#{Time.new.min} #{Time.new.hour > 12 ? 'PM' : 'AM'} (GMT)."
  end
end
class TheHereAnd
  extend ThePresent
end
TheHereAnd.now  #see how we called class not a varialbe p=TheHereAnd.new ; p.now
