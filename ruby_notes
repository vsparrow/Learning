ruby .rb files

Addition (+)
Subtraction (-)
Multiplication (*)
Division (/)
Exponentiation (**)
Modulo (%)

puts adds a newline to the end of the output. print does not.  

###STRING ###STRING ###STRING ###STRING ###STRING ###STRING ###STRING ###STRING 
#---------------------------------------------------------------------------------------
"string".length #get length of string ie: 5
"string".reverse #get reverse of string, ie: gnirts
"string".upcase #convert string to upper case ie: STRING
"String".downcase #convert to lowercase, ie: "string"
"strinG".capitalize #Uppercase first char, lowercase other chars ie: "String"
"strinG".captitalize! # ! modifies variable so that its permanantly set
if user_input.include? "s"   # finds char "s" and replaces it with "th"
    user_input.gsub!(/s/,"th")
string.include? "s" #evaluates to true if it finds "s" and false otherwise.
string.gsub!(/s/,"th") # global substitution method, here substitute all "s" for "th"

comments:
# for single line comments
for multiline comments see below: anything inbetween commented out. open and close must be in all on own, nothing else can be added
=begin
=end

#variables  #variables #variables #variables #variables #variables #variables #variables #variables #variables 
#------------------------------------------------------------------------------------------------------------
convention #variables start with lowercase letter and words should be separated by underscores, like counter and masterful_method
variable_y = gets.chomp #assign variable to user input, Ruby adds newline after each bit of input; chomp removes that extra line. 
#{variable_y}  #use variable in print : print "Your input of #{variable_y} is cool" 
variable_y =Integer(user.chomp) # the variable HAS to be an int

my_array=[1,2,3,4,5]  # Array

#Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression #Expression 
#--------------------------------------------------------------------------------

if expression   # if statments always finsih with an "end" statement
  dosomething #The block of code following an if should be indented two spaces. formatting a should not a must
elsif expression2
  dosomething2
else
  dosomething3
end

unless  some_false_variable    #continue if not true expression; its like "if not true" ; same syntax as if
  doexpression
end

problem = false
print "Good to go!" unless problem
Remember, this is basically a short hand if statement. It will do whatever you ask unless the condition is true. 
In our example, problem is false, so we don't have a problem. We print Good to go!

boolean: # 3 operators && ||  !


# LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS # LOOPS 
# ---------------------------------------------------------------------------------------------------------

until some_statement_is_true
  do this
end

loop do
    something
end

break if i > 5 # when in loop will break if i > 5
next if i % 2 == 0  #in loop skip to next iteration if state true, ie: if even number go to next iteration
