Notes taken:

solidity

STARTING OUT

Solidity's code is encapsulated in contracts.
A contract is the fundamental building block of Ethereum applications —
 all variables and functions belong to a contract

An empty contract named HelloWorld would look like this:
  contract HelloWorld {
  }

All solidity source code should start with a "version pragma" —
  a declaration of the version of the Solidity compiler this code should use.
  *similar to signifying gem version in ruby *

  pragma solidity ^0.4.19;
  contract HelloWorld {
  }

  VARIABLES
  State variables are permanently stored in contract storage.
    This means they're written to the Ethereum blockchain. Think of them like writing to a DB.

    contract Example {
      // This will be stored permanently in the blockchain
      uint myUnsignedInteger = 100;
    }

    The uint data type is an unsigned integer, meaning its value must be non-negative. There's also an int data type for signed integers.
    Note: In Solidity, uint is actually an alias for uint256, a 256-bit unsigned integer.
    You can declare uints with less bits — uint8, uint16, uint32, etc..
    But in general you want to simply use uint except in specific cases, which we'll talk about in later lessons.

  MATH
  Math in Solidity is pretty straightforward. The  operations are the same as in most programming languages:
    note
    Solidity also supports an exponential operator (i.e. "x to the power of y", x^y):
    uint x = 5 ** 2; // equal to 5^2 = 25

  STRUCTS
  Sometimes you need a more complex data type. For this, Solidity provides structs:
    struct Person {
      uint age;
      string name;
    }
  *Appears to be a class like in ruby. **

  ARRAYS
  two types of arrays in Solidity: fixed arrays and dynamic arrays:
    // Array with a fixed length of 2 elements:
    uint[2] fixedArray;
    // another fixed Array, can contain 5 strings:
    string[5] stringArray;
    // a dynamic Array - has no fixed size, can keep growing:
    uint[] dynamicArray;
  *You can also create an array of structs*
    Person[] people; // dynamic Array, we can keep adding to it
  **variabletype[arraysize(optional)] arrayname;**

    PUBLIC ARRAY
    declare an array as public, and Solidity will automatically create a getter method for it. The syntax looks like:
      Person[] public people;
    Other contracts would then be able to read (but not write) to this array.
     So this is a useful pattern for storing public data in your contract.

  FUNCTIONS
  function eatHamburgers(string _name, uint _amount) {  //function decleration
  }
  call the function like this : eatHamburgers("vitalik", 100);
  This is a function named eatHamburgers that takes 2 parameters: a string and a uint
    Note: It's convention (but not required) to start function parameter variable names with an underscore (_)
    in order to differentiate them from global variables.

  APPLICATION: Working With Structs and Arrays
  create struct and add them to struct array
    // create a New Person:
    Person satoshi = Person(172, "Satoshi");
    // Add that person to the Array:
    people.push(satoshi);
    OR oneline
    people.push(Person(16, "Vitalik"));

  PUBLIC PRIVATE
  everything public by default
  And as with function parameters, it's convention to start private function names with an underscore (_).
    //make a private function, add private just before block statement
    function _addToArray(uint _number) private {
      numbers.push(_number);
    }

  FUNCTIONS with RETURN VALUES
  In Solidity, the function declaration contains the type of the return value (in this case string).
    string greeting = "What's up dog";
    function sayHello() public returns (string) {
      return greeting;
    }
  The above function doesn't actually change state in Solidity — e.g. it doesn't change any values or write anything.
  So in this case we could declare it as a view function, meaning it's only viewing the data but not modifying it:
      function sayHello() public view returns (string) {

  PURE FUNCTIONS
  Solidity also contains pure functions, which means you're not even accessing any data in the app. Consider the following:
    function _multiply(uint a, uint b) private pure returns (uint) {
      return a * b;
    }
  This function doesn't even read from the state of the app — its return value depends only on its function parameters


  RANDOM numbers
  Ethereum has the hash function keccak256 built in, which is a version of SHA3.
  A hash function basically maps an input string into a random 256-bit hexidecimal number.
  A slight change in the string will cause a large change in the hash.\
    //6e91ec6b618bb462a4a6ee5aa2cb0e9cf30f7a052bb467b0ba58b8748c00d2e5
    keccak256("aaaab");
    //b1f078126895a1424524de5321b339ab00408010b7cf0e6ed451514981e58aa9
    keccak256("aaaac");
  TYPECASTING
    Sometimes you need to convert between data types.
    uint8 a = 5;
    uint b = 6;
    // throws an error because a * b returns a uint, not uint8:
    uint8 c = a * b;
    // we have to typecast b as a uint8 to make it work:
    uint8 c = a * uint8(b);  <----------typecast

  EVENTS
    Events are a way for your contract to communicate that something happened on the blockchain to your app front-end,
    which can be 'listening' for certain events and take action when they happen.
      // declare the event
      event IntegersAdded(uint x, uint y, uint result);
      function add(uint _x, uint _y) public {
        uint result = _x + _y;
        // fire an event to let the app know the function was called:
        IntegersAdded(_x, _y, result);
        return result;
      }
    Your app front-end could then listen for the event. A javascript implementation would look something like:
      YourContract.IntegersAdded(function(error, result) {
        // do something with result
      }
  **events always declare at top? or just convention?**


****not sure if its the editor or language but not very forgiving
    example: zombie-1 not work while zombie - 1 would

WEB3JS
Ethereum has a Javascript library called Web3.js.
  what is abi?  what does it do? /* abi generated by the compiler */
seems a bit like jquery?


approximate 1.5 hours for lesson 1
