Notes from Codeland 2017. 
Generally in order of presentation.

Talk - Creating Art with a Raspberry Pi - Stephanie Nemeth
* Go create SOMETHING.
* Reality check, asses your skills (improve)
* Break goals into smaller ones.
* Small projects using different frameworks gives you confidence to build more, bigger.
* Projects get people's attention.
* Made a Pi hardware, people on internet can control it, indirectly project helped get job.

Talk - Websites are video games waiting to happen - Opher Vishnia
* Juice -> max output for min input, find it
* Physics events like camera shaking event makes video/website event seem powerful

Talk - Running into your Ex at a party : Elements of a successful game - Chris Algoo
* freesound.org has nice sounds

Talk - Open Data + You = Better Cities - Kate Rabinowitz
* If soemthing it weird don't take it at face value dig deeper. ie: many building built in 1900 in DC, was just a defualt.

Talk - The users your site is missing : Lessons on accessibility from my first coding project  - Breset Walker
* google can have a minimalistic home page because it has a specific function.

Talk - Creating an e-library card : lessongs for coding for one of the largest library systems in the world - Courtney Ervin
* flochart how an app wors
* stakeholders know more about their problems than you

Talk - Javascrupt and the rise of the new virtual machine - Scott Hanselman
* Having a domain makes you a founder
* Think at a higher level of abstraction, that is boss thinking
* platform as a service - hotel - dont care about the clean up
* infrastructure as a service - rental - dont care about the maintenence
* physical server - own a house - have to do everything

DAY2
Talk - Abacus: Shaping the future of education in Belize - Maurice Rogers
* enage your users, talk to them for more info.

WORKSHOP - Preparing for a technical interview - Iuliia Kotlenko
(imho the work shops had a lot to offer as we were able to go over a topic for 3? hours. Can only do one)
JS meetups in Chelsea recommended - they also do mock interviews from time to time
Khanacademy algorithsm course recommnded
Big 0 cheetsheet
Hackerrank better than leetcode, but both are good. then see codality. Pramp  for mock interviews
Use binary search if input sorted else use linear search.
binary search log2n because we split in 2
intervies test problem solving ability
tech intreviews can be  on skype/google hangouts with coding over google docs
good interviewer will try to help steer you to the correct answer
ASK QUESTIONS, even if they seem obvious, they may not be. ask for spcific input/output, what is expected, is arrya sorted
PRACTICE APPLYING data structures, not just knowing them, know performance
hash,binary search tree, stack queue, sort bubble quick merge etc, serch linear and binary
know big O, steps until target or worst case senario. think time AND space complexity
know how to test a solution! not just code but make base tests
dont be silent during interview





