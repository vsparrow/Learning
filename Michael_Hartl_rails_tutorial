Notation

the >= notation always installs the latest gem
 the ~> 4.0.0 notation only installs updated gems representing minor point releases (e.g., from 4.0.0 to 4.0.1), 
 but not major point releases (e.g., from 4.0 to 4.1). 
 
 Unfortunately, experience shows that even minor point releases can break things,

When interacting with a Rails application, a browser sends a request, which is received by a web server and passed on 
to a Rails controller, which is in charge of what to do next. In some cases, the controller will immediately render a view, 
which is a template that gets converted to HTML and sent back to the browser. More commonly for dynamic sites, the controller
interacts with a model, which is a Ruby object that represents an element of the site (such as a user) and is in charge of 
communicating with the database. After invoking the model, the controller then renders the view and returns the complete web page 
to the browser as HTML.

$ git config --global alias.co checkout # Alias for checkout if system doesnt have it

$ git add -A # This command adds all the files in the current directory apart from those that match the patterns in a special file called .gitignore.


$ git branch -D topic-branch
Unlike the -d flag, the -D flag will delete the branch even though we haven’t merged in the changes.

To prepare the system for deployment to production, we run bundle install with a special flag to prevent the local installation
of any production gems (which in this case consists of pg and rails_12factor):
$ bundle install --without production


**
add app, edit controllers/application_controller.rb
edit routes: edit config/routes.rb

scaffold generators, which create a large amount of functionality automatically
 Rails scaffolding is generated by passing the scaffold command to the rails generate script.
 
REST architecture in Rails , which is based on the ideas of representational state transfer

in the context of Rails applications REST means that most application components (such as users and microposts) 
 are modeled as resources that can be created, read, updated, and deleted—operations that correspond both to 
 the CRUD operations of relational databases and to the four fundamental HTTP request methods: POST, GET, PATCH, and DELETE
 
Variables that start with the @ sign, called instance variables, are automatically available in the views


If double-quoted strings can do everything that single-quoted strings can do, and interpolate to boot, 
what’s the point of single-quoted strings? They are often useful because they are truly literal, and contain exactly the 
characters you type. For example, the “backslash” character is special on most systems, as in the literal newline \n. 
If you want a variable to contain a literal backslash, single quotes make it easier:
>> '\n'       # A literal 'backslash n' combination
=> "\\n"

As with the #{ combination in our previous example, Ruby needs to escape the backslash with an additional backslash; inside double-quoted strings, a literal backslash is represented with two backslashes. For a small example like this, there’s not much savings, but if there are lots of things to escape it can be a real help:

>> 'Newlines (\n) and tabs (\t) both use the backslash character \.'
=> "Newlines (\\n) and tabs (\\t) both use the backslash character \\."


It’s worth noting that the nil object is special, in that it is the only Ruby object that is false in a boolean context,
apart from false itself. We can see this using !! (read “bang bang”), which negates an object twice, thereby coercing it to its boolean value:
>> !!nil
=> false

Note that Ruby functions have an implicit return, meaning they return the last statement evaluated—

>> a                  # Just a reminder of what 'a' is
=> [42, 8, 17]
>> a.first
=> 42
>> a.second
=> 8
>> a.last
=> 17
>> a.last == a[-1]    # Comparison using ==
=> true

You can also add to arrays with the push method or its equivalent operator, <<:
>> a.push(6)                  # Pushing 6 onto an array
=> [42, 8, 17, 6]
>> a << 7                     # Pushing 7 onto an array
=> [42, 8, 17, 6, 7]
>> a << "foo" << "bar"        # Chaining array pushes
=> [42, 8, 17, 6, 7, "foo", "bar"]

Although hashes resemble arrays, difference is that hashes don’t  guarantee keeping their elements in a particular order
If order matters, use an array

inspect method, which returns a string with a literal representation of the object it’s called on:
>> puts "It worked!", "It worked!".inspect  THE OUTPUT IS    It worked!  vs "It worked!"


parentheses? In Ruby, they are optional, so these two are equivalent:
# Parentheses on function calls are optional.
stylesheet_link_tag('application', media: 'all',
                                   'data-turbolinks-track' => true)
stylesheet_link_tag 'application', media: 'all',
                                   'data-turbolinks-track' => true

When hashes are the last argument in a function call, the curly braces are optional, so these two are equivalent:
# Curly braces on final hash arguments are optional.
stylesheet_link_tag 'application', { media: 'all',
                                     'data-turbolinks-track' => true }
stylesheet_link_tag 'application', media: 'all',
                                   'data-turbolinks-track' => true


why does the data-turbolinks-track key-value pair use the old-style hashrocket syntax? This is because using the newer syntax to write
data-turbolinks-track: true
is invalid because of the hyphens. (Recall from Section 4.3.3 that hyphens can’t be used in symbols.) This forces us to use the older syntax, yielding
'data-turbolinks-track' => true


 Hash.new can take  a default value for the hash, which is the value of the hash for a nonexistent key:
>> h = Hash.new
=> {}
>> h[:foo]            # Try to access the value for the nonexistent key :foo.
=> nil
>> h = Hash.new(0)    # Arrange for nonexistent keys to return 0 instead of nil.
=> {}
>> h[:foo]
=> 0

When a method gets called on the class itself, as in the case of new, it’s called a class method. 
The result of calling new on a class is an object of that class, also called an instance of the class.
A method called on an instance, such as length, is called an instance method.


 In Rails, the principal importance of instance variables is that they are automatically available in the views,
 but in general they are used for variables that need to be available throughout a Ruby class. 
 Instance variables always begin with an @ sign, and are nil when undefined.
 
 
  In general, CSS rules refer either to a class, an id, an HTML tag, or some combination thereof, followed by a list of styling commands.
  
  the dot . in .center indicates that the rule styles a class. 
  This means that elements inside any tag (such as a div) with class center will be centered on the page.


While assert_select is flexible and powerful (having many more options than the ones shown here), experience shows that it’s wise to take a lightweight approach by testing only HTML elements (such as site layout links) that are unlikely to change much over time.

