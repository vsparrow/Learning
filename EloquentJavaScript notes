Chapter1: 
There are six basic types of values in JavaScript: numbers, strings, Booleans, objects, functions, and undefined values.
2.998e8 means 2.998 * 10^8 = 299,900,00  
Infinity and -Infinity, which represent the positive and negative infinities. Infinity - 1 is still Infinity, and so on. 
  Don’t put too much trust in infinity-based computation. It isn’t mathematically solid,  
NaN stands for “not a number”
  You’ll get this when, for example, (0/ 0), or any number of other numeric operations that don’t yield a  meaningful result.
  There is only one value in JavaScript that is not equal to itself, and that is NaN, which stands for “not a number”.
    console.log(NaN == NaN)  // → false
    if you find yourself getting one of those in an unexpected place, look for accidental type conversions.
typeof operator, which produces a string value naming the type of the value you give it.  
  typeof 4.5 => number   typeof "x" => string
unary operators operators that take one value example minus 
  -10
binary operators: operators that take 2 values, example minus
  9-2
  *minus can be binary or unary operator
ternary, operating on three values.
  console.log(true ? 1 : 2); // → 1   console.log(false ? 1 : 2); // → 2  This one is called the conditional operator
undefined vs null is an accident of JavaScript’s design, and it doesn’t matter most of the time. 
false
  0, NaN, and the empty string ("") count as false, while all the other values count as true. 
  Because of this, expressions like 0 == false and "" == false are also true. 
Type conversions  
  For cases where you do not want any automatic type conversions to happen, there are two extra operators: === and !==.
  
Chapter2:
variables   imagine variables as tentacles, rather than boxes. They do not contain values; they grasp them
environment The collection of variables and their values that exist at a given time 
  When a program starts up, this environment is not empty. It always contains variables that are part of the language standard,
function  piece of program wrapped in a value. Such values can be applied in order to run the wrapped program. 
  example, in a browser environment, the variable alert holds a function that shows a little dialog box with a message.
block: A sequence of statements wrapped in braces.  
constructor  the first letter of a variable is capitalized. This was done to mark this function as a constructor 
  ie: Number()
  
Chapter3:
lexical scoping. approach to variable visibility  
  each local scope can also see all the local scopes that contain it.  
scope   in JavaScript, functions are the only things that create a new scope.
  People who have experience with other languages might expect that any block of code between braces produces a new local environment.
  EXAMPLE: the something inside the block refers to the same variable as the one outside the block. 
    var something = 1; {  var something = 2;}
function 
  conceptually moved to the top of their scope and can be used by all the code in that scope
    ie: console.log(root(4)); root(x){return something}  :  even though root decalred after console, still useable
  var square = function(){}  is the same as function square(){}
  standards: dont put function inside an if block
  naming:
     name printZeroPaddedWithLabel(), is a little awkward
       try to pick out a single concept. 
       A function with a nice, obvious name like zeroPad() makes it easier for someone who reads the code to figure out what it does.
  side-effects vs return values ::
    Functions can be roughly divided into those that are called for their side effects and those that are called for their return value.
      (though functions can have both)
      return value functions more valuable than side effect functions since can be versitile, combined different ways
      printZeroPaddedWithLabel, is called for its side effect: it prints a line. console.log(num + label)
      The second version, zeroPad, is called for its return value. return (num + label)
  pure function 
    value-producing function thathas no side effects but also doesn’t rely on side effects from other code 
     it doesn’t read global variables 
call stack The place where the computer stores call context 
  function has to jump back to the place of the call when it returns, 
  the computer must remember the context from which the function was called. 
  Every time a function is called, the current context is put on top of this “stack”. 
  When the function returns, it removes the top context from the stack and uses it to continue execution.
  stack requires space in the computer’s memory. When the stack grows too big,
    the computer will fail with a message like “out of stack space” or “too much recursion”.
arguments:
  JavaScript is extremely broad-minded about the number of arguments you pass to a function.
  If you pass too many, the extra ones are ignored.
  If you pass too few, the missing parameters simply get assigned the value undefined.
    The upside is that this behavior can be used to have a function take “optional” arguments.
closure
  being able to reference a specific instance of local variables in an enclosing function—is called closure.
  A function that “closes over” some local variables is called A closure. (ie: it is A closure) 
recursions
  in typical JavaScript implementations, it’s about 10 times slower than the looping version. 
  Running through a simple loop is a lot cheaper than calling a function multiple times.
  why recursion?
    Often, a program deals with such complex concepts that giving up some efficiencyto make the program straightforward is attractive
    

Chapter4:
JavaScript values all have properties. The exceptions are null and undefined
  two most common ways to access properties are dot and with square brackets. 
  value.x and value[x] 
    Whereas value.x fetches the property of value named “x”, 
    value[x] tries to evaluate the expression x and uses the result as the property name.  
      array.length is easier to write than array["length"]
object arbitrary collections of properties
  One way to create an object is by using a curly brace notation.
    var day1 = {  squirrel: false,  events: ["work", "touched tree", "pizza", "running","television"]};
  Reading a property that doesn’t exist will produce the value undefined
  = operator. This will replace the property’s value if it already existed or create a new property on the object if it didn’t.
  property bindings grasp values, but other variables and properties might be holding onto those same values. 
  delete operator :remove the named property from the object.
  in operator, when applied to a string and an object, returns a Boolean value that indicates whether that object has that property.
    console.log("left" in anObject); // → false
  objects are mutable:  content of a value can be modified by changing its properties.
  there is a difference between having two references to the same object and having two different objects have the same properties.
    references: object2 = object1; console.log(object2==object1) //true    
    properties: object3 = {value:10}; object1 ={value:10}; console.log(object1==object3) //false
      omparing different objects will return false, even if they have identical contents. 
    loop construct specifically for going over the properties of an object  
      for (var event in map)
array
  push pop shift unshift indexOf method 
  lastIndexOf, which starts searching for the given element at the end of the array instead of the front.
    console.log([1, 2, 3, 2, 1].indexOf(2));// → 1  console.log([1, 2, 3, 2, 1].lastIndexOf(2));// → 3
      both take an optional second argument that indicates where to start searching from.
  slice, which takes a start index and an end index and returns an array that has only the elements between those indices. 
    start index is inclusive, the end index exclusive.
  concat method can be used to glue arrays together,
String
  properties
    not objects, and though JS  doesn’t complain if you try to set new properties on them, it doesn’t actually store those properties.
  slice and indexOf
    One difference is that a string’s indexOf can take a string containing more than one character
      console.log("one two three".indexOf("ee"));// → 11
  trim removes whitespace (spaces, newlines, tabs, and similar characters) from the start and end of a string.
    console.log("  okay \n ".trim()); // → okay    
  charAt Accessing the individual characters in a string
Arguments object:
  Whenever a function is called, a special variable named arguments is added to the environment
  object holds all of the arguments passed to the function
  in JS you are allowed to pass more (or fewer) arguments to a function than the number of parameters the function itself declares.
  length property ::   that tells us the number of arguments that were really passed to the function. 
  it is a lot like an array. But this object, unfortunately, does not have any array methods (like slice or indexOf)
Math 
  a grab-bag of number-related utility functions. used simply as a container to group a bunch of related functionality.  
  makes global namespace clean
    ex: you want to use the name max.  Since built-in max function inside the Math object, we don’t have to worry about overwriting it.
  why? Many languages will stop you, when you are defining a variable with a name that is already taken. JavaScript does not!
List   (not to be confused with the array).
  is a nested set of objects, with the first object holding a reference to the second, the second to the third, etc
    ie: item1 points to item2 which points to item3 which points to item4, etc
    var list = {  value: 1,  rest: {  value: 2,  rest: { value: 3, rest: null  } }};


Chapter5:   **reread 5 **
Abstracting
  “doing something” can be represented as a function
    functions are just values 
      we can pass our action as a function value.
  function forEach(array, action) { for (var i = 0; i < array.length; i++)   action(array[i]);}    
  forEach(["Wampeter", "Foma", "Granfalloon"], console.log);    
Higher-order functions
  Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.
  allow us to abstract over actions, not just values.
  come in several forms  
    can have functions that create new functions.
      function greaterThan(n) {return function(m) {return m>n);};
        var greaterThan10=greaterThan(10);  console.log(greaterThanTen(11));
    can have functions that change other functions.    
    can have functions that provide new types of control flow.
apply method 
  pass it an array (or array-like object) of arguments, and it will call the function with those arguments.
  function transparentWrapping(f){ return function() { return f.apply(null, arguments); }  }
JSON   
   which stands for JavaScript Object Notation. It is widely used as a data storage and communication format on the Web.
   JSON.stringify
    akes a JavaScript value and returns a JSON-encoded string. 
   JSON.parse, that convert data to and from this format. 
     takes such a string and converts it to the value it encodes.
filter tandard method on arrays. 
  console.log(ancestry.filter(function(person) {  return person.father == "Carel Haverbeke";}));  //anscestry json object
map     also a standard method on arrays.
  transforms an array by applying a function to all of its elements and building a new array from the returned values
  The new array will have the same length as the input array,
  console.log(map(overNinety, function(person) {  return person.name;})); //where overNinety is json object
reduce   computing a single value from an array
  think of it as folding up the array, one element at a time.
  console.log(reduce([1,2,3,4],function(a,b){return a+b},0));  //where 0 is the number to start with  //answer 10
    If your array contains at least one element, you are allowed to leave off the start argument. 
    The method will take the first element of the array as its start value and start reducing at the second element.
apply method:    
  used to call them with an array specifying their arguments.
  first argument is an owner object, next is array
    function myFunction(a,b) {return a*b;} ; myArray = [10,2];
    myObject = myFunction.apply(myObject/ array)  //returns 20    
Abstractions add layers between the raw things the computer is doing and the concepts we are working with 
  thus cause the machine to perform more work. 
Bind:
  all functions have it, creates a new function that will call the original function but with some  the rguments already fixed.
  isInSet.bind(null, theSet);  //theSet is an array
    the first argument when isInset is called will be theSet
    the first argument, null, is becuase its used for method calls
every take a predicate function that, when called with an array element as argument, returns true or false. 
  Just like && returns a true value only when the expressions on both sides are true, 
  every returns true only when the predicate returns true for all elements of the array. 
some  take a predicate function that, when called with an array element as argument, returns true or false.
  some returns true as soon as the predicate returns true for any of the elements. T
  hey do not process more elements than necessary—
    if some finds that the predicate holds for the first element of the array, it will not look at the values after that.  
    
CHapter6:    

Methods : properties that hold function values
  ex: var rabbit = {}; rabbit.speak=function(line){console.log("The rabbit says " + line)}  // speak is a method of rabbit
this
  method needs to do something with the object it was called on
  variable this in its body will point to the object that it was called on. 
  ex: function speak(line){console.log(this.type + " rabbit says " + line)}
      var whiteRabbit = {type: "white", speak: speak} ;       var fatRabbit   = {type: "fat", speak: speak}
      whiteRabbit.speak("I like carrots") // white rabbit says I like carrots
call: a amethod
  smilar to apply but takes arguments normally ather than as a array
  call can be passed a this value
  ex: speak.apply(fatRabbit,["Burp!"]); //fat rabbit says Burp!
      speak.call({type: "old"},"Oh my"); // old rabbit says oh my!   //type old was defined in this call!
prototype 
  almost all objects also have a prototype       
  A prototype is another object that is used as a fallback source of properties. 
    When an object gets a request for a property it does not have, its prototype will be searched , then the prototype’s prototype, etc
  Object.prototype : ancestor of all prototypes
  Object.getPrototypeOf("hola") //String{}     Object.getPrototypeOf(Math.floor) //function(){...}
    returns the protoype of an object 
  Object.create to create an object with a specific prototype.
    ex: var protoRabbit={speak: function(line){console.log(this.type +" rabbit says " +line)}}'
        var matrixRabbit = Object.create(protoRabbit);  matrixRabbit.type="Matrix"
        matrixRabbit.speak("I know KungFu"); //Matrix Rabbit says I know KungFu
Constructor
  convenient way to create objects that derive from some shared prototype is to use a constructor
  calling a function with the new keyword in front of it causes it to be treated as a constructor. 
  An object created with new is said to be an instance of its constructor.
  convention to capitalize the names of constructors so that they are easily distinguished from other functions.
    ex    function Rabbit(type){this.type=type;}
          var blackRabbit = new Rabbit(black); console.log(blackRabbit.type) //black
  all constructors get an objet named protoype
    easy to add a method
    
  Rabbit.prototype.speak = function(line) {
  console.log("The " + this.type + " rabbit says '" +
              line + "'");
};
blackRabbit.speak("Doom...");
// → The black rabbit says 'Doom...'
