node a javascript runtime for the v8 engine, which takes js and makes it machine code

environment
  blocking : waits for return of x before proceeding, then does y
  non-blocking: continues with y while waiting for x

  module : unit of code to use

variables
  global  like window command in console.log, every variable you create lives here
  process shows current node process
    process.argv //shows arguments // 1st is executable for node //2nd is js file // 3rd,etc is command line args
  
  ${} template string ES6 -> add text in strings with out breaking quote or using + -> `Hello ${user.username}`
    *** must use tickback *** the ` /same button as ~ /under Escape
  FUNCTIONS: es5 vs es6  //  function(){}  // () => {}    
    arrow functions // var square = x => x * x;  //if one input can leave off parentisis// return is implicit/implied 
      this keyword : arrow functions DO NOT bind it, it wont work
      arguemnts array, arrow functions do not have one, if called will return global arguments function, not of method
      use regulr functions if you need this or arguments
  JSON uses double quotes inside itself. single quote valid in JS but NOT JSON  
  try { some code} catch (error) { if error do this, or nothing if nothing in here!} //like an if/else kind of
  
commands  
  array.filter() -> create new array with all elements that pass the test// var arr=notes.filter((note) => note.title === title);  
  decodeURIComponents("github%20page") // github page ->makes human friendly string fom broser
  encodeURICompnents('github page')// github%20page //makes browser friendly sting  //see decodeURI
  fs.appendFileSync("file","text to append to file") //Syncrounus - blocking
  fs.readFileSync("filename")    //read file -> var somevar = fs.readFileSync("filename")
  JSON.parse(personString); take string and convert to JSON object or array (depends on input string)
  JSON.stringify(obj) //var stringObj =  JSON.stringify(obj); takes object,obj,  and returns JSON stringified version
    Pretty: JSON.stringify(obj,undefined,2) //need 2nd arg to get to third // 2nd arg is for filtering //3rd is for indentation
  module.exports.age = 25; in notes.js // when required in another file can call on notes.age
  
  nodemon server.js -e js,hbs // tells nodemon to watch js and hbs if it wont do it by default
  nodemon --exec "npm test" ->run tests automatically everytime file chnages
    we are going to specify a command to run and it might not nessearily be a node file
    i can also: nside package.json, in scripts, place this     "test-watch": "nodemon --exec \"npm test\""
        then in command we can run "npm run test-watch"    

********************************************  
NPM
  npm init //init dir
  npm debug "rest of the normal arguments" //for debuggine errors
    commands
      n next
      c constinue to end or next debugger keyword
      repl : read evaluate print loop : brings you to a new area of debugger : its a console
        you have access to the current program as it sits. 
        ie: if was on line 7, the sstate of the program is as it would be before line 7 runs
    variables
      debugger;  when this is in the js file, the debugger will stop here on run     
  npm intall packagename --save //install external package
    npm install //if dir without node_modules dir but has package.json just run command, will install everything in p.j
    npm install package -g // installs paackage as a global utility, ex nodemon
    npm install package --save //saves page
    npm install package --save-dev // saves package for dev use , will not upload to heroku etc
    

*********************************************
Packages - in js unless command line specified
  lodash //for common functions like is string filter etc
  nodemon filename.js // commandline - reruns filename.js everytime a change is made to filename.js
  yargs //for getting arguments // npm app.js --title NewThing // in app: var yargs = require("yargs")
    yargs.argv -> has key:value pair of args, ex {title : "NewThing"}
    yargs.options({ a: {demand:true, alias: "address", describe: "some text on what this, a, does", string : true }  })
      // require "a" when running app//can use address instead of a// string true forces  treating all input "a" as string
      
*********************************************
PROMISE
var somePromise = new Promise((resolve,reject) => {resolve('Hey, it worked'); reject('Unable to fulfill promise');});
you can resolve one once, or reject one once, but cant do both, and cant do twice
promise pending when waiting for data
promise settled when it has resolved or rejected data //so either way "promise settled"

to make a promise, use constructor  var somePromise = new Promise(someAnonymousFunction(){});
used for async action like fetch website data
resolve ->fulfill promise -> its done what you expected, ike DB request, http request, or something lese
 inside resolve is actual data user wanted
reject -> cant fullfil promise

somePromise.then(function1(data1){},function2(data1){}) //call back for success and failure
can only pass in 1 piece of data to both resolve and reject, so best to use object with multiple properties
function1 only for success, call works as expected, gets value for resolve
function2 is for error, but variable ssame as function1

promise provide callbacks for both success and error cases
in callback, one function fired no matter what, arguments let us know about status
promises have 2 functions so that will let us know if things went as planned

can chain multiple then and have one catch at the end   axios.get().then().then().then().catch() 
one reason why people like promises over callbacks is instead of nesting, you chain // no crazy indentation

TO THROW ERROR  our promise can catch // to create error from result that we know is erronus but promise doesnt
throw new Error("error message here")
console.log(error.message) to print error above, console should be in catch

****************************
AXIOS promise based http request
//axios knows how to automatically parse json data
//what get returns is actually a promise -> we can use  .then to run some code when a promise is fulfilled or rejected
//success case: axios library recommends you calll it response
//add catch after try to catch all the errors  axios.get(url).then((response)=>{}).catch((error)=>{})

****************************
EXPRESS
  app.use(express.static(__dirname + "/public")) //static takes the absolute path you want to serve up
  __dirname gets passed to our file via a wrapper function  (double underscore dirname)
    it stores the path to your projects dir
    what this does is that you can now store static html pages in a folder called "public"
    and those pages will be server without having to create routes.
  app.set allows set various express related config
    keyvalue pair {what you want set : what you want use}
  app.use is how you use middleware, it takes a function
    next() tells your express when middleware   is done // app.use((req,res,next) => { next(); });
      if we do something asyncronus, middle ware does not move on, only when it sees next()
      if you dont call next, your handlers for each request never fire, ie app freeze
  next() -> see app.views
  views dir (console):  mkdir views : default dir express uses to store files like ejs or hbs    
  

****************************
HANDLEBARS

hbs.registerPartials(__dirname + "/views/partials")  //add support for partials 
  takes dir that you wnt to use for handlebar partial files. needs absolute dir
{{> footer}}  //to add a partial in hbs file, ex footer, use this syntax  {{> footer}}
  // the footer partial lives in views/partials/footer.hbs
helpers:  in app.js or main file //handlebar helper -> ways to register functions to run to dynamically create output     
  functions you can run inside your handlebar template
  must register it //name of helper first arg, function to run as second arg
  here if getCurrentYear is called example, in footer, return the year from the function
    ex in app.js: hbs.registerHelper('getCurrentYear',()=>{return new Date().getFullYear()})  
    ex in footer.hbs : {{getCurrentYear}}
  helper that takes input from hbs file
    access helper screamIt, pass in variable welcomeMessage, display returned data
     ex: hbs.registerHelper('screamIt',(text)=>{    return text.toUpperCase();}) 
      ex: in hsb:  <p>{{screamIt welcomeMessage}}</p>  
nodemon server.js -e js,hbs // tells nodemon to watch js and hbs if it wont do it by default //same as node commands above

****************************
HEROKU
  git push heroku
  
****************************

WORKFLOW to create app/ add to app
  ex: add new projects page to website
    register new url in server.js, /projects
    -render handlebar template
    -make view file
    -render header and footer 
    -content inside hbs/ejs page : portfolio page here
    -inside partial - > new link for projects page
      commit, push to git hub
      push to heroku -> git push heroku
      check app
      
**********************************
TESTS   Mocha and Expect used together
  
  Assert : make assertions about values, type , array contins element, etc // assertioans can be chained
  Expect is what we are using , by mjackson
    ex: expect assert: response is number9 and type is number //inside: utils.test.js //require expect//
      it("should expect some values", ()=>{ expect(12).toNotBe(11);}) //non calling test 
      it("should square", ()=>{var res = utils.square(3);   expect(res).toBe(9).toBeA("number");})  //calling test 
  toNotBe works for numbers strings bool, not for objects
  toEqual : use for objects expect({name: "vsparrow"}).toEqual({name: "vsparrow"}) //toNotEqual also obj use
  toInclude : array or obj includes some things in array or properties in obj//toExclude opposite
    ex:obj    expect({name: "Andrew", age: 25, location : "Phil"}).toInclude({age:25})
  ASYNC::::
  //callback is what makes function async // simulating calll to database etc
  //***by default if tests take longer than 2 sec, Mocha will fail them
  ex: //call callback with sum
    in utils:: module.exports.asyncAdd = (a,b,callback) => {setTimeout(()=>{ callback(a+b);},1000)}; //simulation of delay
    in test file:
      it("should async add two numbers",(done)=>{
        utils.asyncAdd(4,3,(sum)=>{ expect(sum).toBe(7).toBeA("number");   done(); }) })
      **done** tells mocha this is a a sync function, else will complete without doing test on async
        waits until done called // if done is not called, mocha will fail assertion

  for express testing:
    in server.js : module.exports.app = app; //at end after app.listen
    in server.test.js : var app = require("./server.js").app; const request = require("supertest");

  if need a test that isnt in supertest or expect, must create own function
    example:
    /server.js
      app.get("/users",(req,res)=>{res.send([ {name: "Andrew", age: 25},{name: "Mike", age: 27}  ])})
    //server.test.js
      it("should return an array", (done)=>{ request(app).get("/users").expect(200)
        .expect((res)=>{var hasName = false; res.body.forEach((user)=>{ if(user.name==="Andrew") {hasName=true} })
            expect(hasName).toBe(true); }).end(done);})
 
 describe: comes from mocha
   group tests together // if have several tests in describe , output is grouped
   can nest describe under describe // ie: outter Group: web tests //inner group: database callback tests
   ex describe('GroupNameHere',()=>{it('should something', ()=>{expect()}) }

spies - built in with expect// just load  expect
  spies allows you to swap out a real function for a testing utility
  you can make sure function was called with certain argument, create various assertion about test function
  ex var spy = expect.createSpy(); //returns a function that you swap out for the real one
    spy("Andrew",25); //call spy
    expect(spy).toHaveBeenCalled(); //was spy called? 
    expect(spy).toHaveBeenCalledWith("Andrew",25); //was spy called with argument x,y? 

rewire -> allows up to swap out variables for tests
  use require instead of require when loading in the file you want to mock out
  ex: var app = rewire("./app.js")
  rewire loads require but adds 2 methods app.__set__ and app.__get__  //used to mock out data in app.js   
    
***********************************************
NOSQL 
  NoSQL / SQL
  Both are Database
  Collection  Table           [{},{},{}]
  Document    Row/Record      {}
  Field       Column          name: "User1"

***********************************************
MONGO
DB create
  you can create a new db by just connecting to it., no need to create it, but ust add data to it else mongo wont create

Mongo shell: 
  update field value in mongo shell
    { "_id" : ObjectId("5912ac583d7f810be5eafcb1"), "text" : "Walk to dog", "completed" : false }
    -> db.Todos.update({_id: ObjectId("5912ac583d7f810be5eafcb1")}, {$set: {completed: true}})
Code
  connect and insert
    const MongoClient = require('mongodb').MongoClient;
    // MongoClient.connect(urlofdb, callback after connection succed or fail);
    MongoClient.connect("mongodb://localhost/TodoApp",(err, db)=>{if(err){ return console.log("Unable to connect")}
      db.collection("Todos").insertOne({text: "Something to do", completed : false},(err,result)=>{
          if(err){return console.log("Unable to insert todo", err)}
          console.log(JSON.stringify(result.ops,undefined, 2)) //ops contains what was inserted
      })    //takes name of collection that you want ot insert into
      db.close();
    });
  findOneAndDelete //gets the doc before delete

Mongoose
  //mongoose will auto wait for db to connect before it saves // no need callback
  
  
  
