node a javascript runtime for the v8 engine, which takes js and makes it machine code

environment
  blocking : waits for return of x before proceeding, then does y
  non-blocking: continues with y while waiting for x

  module : unit of code to use

variables
  global  like window command in console.log, every variable you create lives here
  process shows current node process
    process.argv //shows arguments // 1st is executable for node //2nd is js file // 3rd,etc is command line args
  
  ${} template string ES6 -> add text in strings with out breaking quote or using + -> `Hello ${user.username}`
    *** must use tickback *** the ` /same button as ~ /under Escape
  FUNCTIONS: es5 vs es6  //  function(){}  // () => {}    
    arrow functions // var square = x => x * x;  //if one input can leave off parentisis// return is implicit/implied 
      this keyword : arrow functions DO NOT bind it, it wont work
      arguemnts array, arrow functions do not have one, if called will return global arguments function, not of method
      use regulr functions if you need this or arguments
  JSON uses double quotes inside itself. single quote valid in JS but NOT JSON  
  try { some code} catch (error) { if error do this, or nothing if nothing in here!} //like an if/else kind of
  
commands  
  array.filter() -> create new array with all elements that pass the test// var arr=notes.filter((note) => note.title === title);  
  decodeURIComponents("github%20page") // github page ->makes human friendly string fom broser
  encodeURICompnents('github page')// github%20page //makes browser friendly sting  //see decodeURI
  fs.appendFileSync("file","text to append to file") //Syncrounus - blocking
  fs.readFileSync("filename")    //read file -> var somevar = fs.readFileSync("filename")
  JSON.parse(personString); take string and convert to JSON object or array (depends on input string)
  JSON.stringify(obj) //var stringObj =  JSON.stringify(obj); takes object,obj,  and returns JSON stringified version
    Pretty: JSON.stringify(obj,undefined,2) //need 2nd arg to get to third // 2nd arg is for filtering //3rd is for indentation
  module.exports.age = 25; in notes.js // when required in another file can call on notes.age
  
********************************************  
NPM
  npm init //init dir
  npm debug "rest of the normal arguments" //for debuggine errors
    commands
      n next
      c constinue to end or next debugger keyword
      repl : read evaluate print loop : brings you to a new area of debugger : its a console
        you have access to the current program as it sits. 
        ie: if was on line 7, the sstate of the program is as it would be before line 7 runs
    variables
      debugger;  when this is in the js file, the debugger will stop here on run     
  npm intall packagename --save //install external package
    npm install //if dir without node_modules dir but has package.json just run command, will install everything in p.j
    npm install package -g // installs paackage as a global utility, ex nodemon
    
    

*********************************************
Packages - in js unless command line specified
  lodash //for common functions like is string filter etc
  nodemon filename.js // commandline - reruns filename.js everytime a change is made to filename.js
  yargs //for getting arguments // npm app.js --title NewThing // in app: var yargs = require("yargs")
    yargs.argv -> has key:value pair of args, ex {title : "NewThing"}
    yargs.options({ a: {demand:true, alias: "address", describe: "some text on what this, a, does", string : true }  })
      // require "a" when running app//can use address instead of a// string true forces  treating all input "a" as string
      
