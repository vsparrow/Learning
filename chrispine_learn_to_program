When you write something in a human language, what is written is called text. 
When you write something in a computer language, what is written is called code.

To make the code easier to read, 
colored parts of the code different colors. 
(For example, numbers are always green.)
Anything you are supposed to type in will be in a dotted box, 
anything a program prints out will be in a grey box

puts means PUT STRING
gets means GET STRING 

chomp of gets.chomp takes of eneter enterS at end of String
chomp also works for other variables too! no only gets

what is self? It's a special variable which points to whatever object you are in.

5 + 5 is really just a shortcut way of writing 5.+ 5.

Captials come BEFORE lowercase!

 The comparison methods aren't giving us the strings 'true' and 'false'; they are giving us the special objects true and false
 
  A computer, on the other hand, uses or to mean "one or the other, or both."
  
  
 nil: Ruby's way of saying "nothing". nil is a special object which basically means "not any other object." 
 And when you puts nil, it prints out nothing. (Just a new line.) 
 
 
 
a=[89.9,flavor,[true,false]]	#but this is
a.each {|x| puts x}
flavor='berry'
a.each {|x| puts x}
# Remember, variables aren't objects, so our last array is really pointing to float, a string, and an array. 
# Even if we were to set flavor to point to something else, that wouldn't change the array. 
# in print 2 of array it still outputs vanilla

array.each
each is just another array method. Methods like each which "act like" loops are often called iterators. 

join works much like to_s does, except that it adds a string in between the array's objects. Let's take a look: 

200.times do
  puts []
end


puts treats arrays differently from other objects: it just calls puts on each of the objects in the array. 
That's why putsing an empty array 200 times doesn't do anything; the array doesn't point to anything, 
so there's nothing to puts. (Doing nothing 200 times is still doing nothing.) 


 The methods push and pop are sort of opposites, like + and - are. 
 push adds an object to the end of your array, 
 pop removes the last object from the array (and tell you what it was).
 last is similar to pop in that it tells you what's at the end of the array, except that it leaves the array alone.

Every method returns something even if its just nil
*******the value returned from a method is simply the last line of the method. 
look below, even though we dont explicity say return 'yellow submarine' that is what is returned. weird!


def sayMoo numberOfMoos
  puts 'mooooooo...'*numberOfMoos
  'yellow submarine'
end

x = sayMoo 2
puts x

mooooooo...mooooooo...
yellow submarine

make time:
puts Time.mktime(1976, 8, 3, 10, 11)  # When I was born.
time  = Time.new   # The moment I generated this web page.
time2 = time + 60  # One minute later.


 You can compare times using the comparison methods 
 (an earlier time is less than a later time), 
 if you subtract one time from another, you'll get the number of seconds between them. 
 
 
 
 Hashes are a lot like arrays: they have a bunch of slots which can point to various objects.
 However, in an array, the slots are lined up in a row, and each one is numbered (starting from zero). 
 In a hash, the slots aren't in a row (they are just sort of jumbled together), 
 you can use any object to refer to a slot,  not just a number. 
 It's good to use hashes when you have a bunch of things you want to keep track of, 
 but they don't really fit into an ordered list.
 
 
 
 classes:
 you can extend a class, such as integer with a new def to make a new method, or you can create a new class entirly.
 inside that method we use self to refer to the object (the integer) using the method. 
 
class Die
  def initialize#(numberShowing)
    roll
  end
  def roll
    @numberShowing = 1 + rand(6)
  end #def roll

  def showing
    @numberShowing
  end #def showing  

  def update (input)
    if input >0 and input < 7
      @numberShowing = input
    else
      puts 'ERROR only 1 to 6 !!!'
    end
  end
end #class

dice=[Die.new,Die.new]  # make some dice
dice.each do |die|
  puts die.roll
end
puts dice[0].showing 
puts dice[1].showing
x=Die.new
puts "Now SHowing: #{x.showing}"
x.update(5)
puts x.showing

An instance of a class is just an object of that class. 
A method's local variables last until the method is finished. 
An object's instance variables, on the other hand, will last as long as the object does. 
To tell instance variables from local variables, they have @ in front of their names: 
