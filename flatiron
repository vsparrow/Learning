GIT  ****************************************************************
git cheet sheet                     https://www.git-tower.com/blog/content/posts/54-git-cheat-sheet/git-cheat-sheet-large01.png

git reset --hard <commit id>        revert
git clone                           to clone a repository to your local computer.
                                        To clone, make sure you've clicked on the SSH link (it starts with git@github.com:
git status                          to see the status of your locally cloned git repository.
git add .                           to add your local changes to be committed.
git commit -am "Commit Message"     to commit changes that have been added with a message.
git push                            to upload your local changes to GitHub.

GITHUB FORK                         Forking is the process of making a personal copy of the Learn lab on GitHub
github pull request(web)            Submitting a pull request is how you submit your lab to be evaluated or graded 



SHELL ***************************************************************
commands    see https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html
LS
    ls -lah        h is a suffix on the l flag meaning "human readable formats." 
                    a meaning "all information including permissions".
    la -a          show jidden files                
loop    for f in *.txt;do echo $f;done    
open  it will trigger the default action associated with the file type. $ open hello_world.rb
paths
  absolute path 
    points to the same location  regardless of the working directory. They start with / ("forward slash") 
    because that is the root of your file system. This is an absolute path: /Users/avi.
  relative path 
    path relative to the working directory of the user or application, 
    They start with the name of a directory or a file.This is a relative path: avi/Documents.
$PATH  list of directories that BASH will look in for commands, scripts, and programs.  type into shell
    edit .bash_profile to add/remove dirs
pipe    | symbol named "pipe", will send the output of one command into the input of another command.    
        $ ps aux | grep ruby
ps aux  get all processes
pwd   print working dir , get current dir
~     go home dir  , tilda

    





SQL *****************************************************************
SQL statements terminated with a ";"
open db   sqlite3 test_sqlite.db
datatypes: TEXT INTEGER REAL(is float/decimal) BLOB

CREATE TABLE table_name;  
  create a database table called "Test Table" create table test_table(id);    
  CREATE TABLE cats (
        id INTEGER PRIMARY KEY,
                name TEXT, 
                age INTEGER
            );
  create from file:   sqlite3 pets_database.db < 01_create_cats_table.sql

show tables   .tables
show scema    .schema
change table(schema)  ALTER TABLE cats ADD COLUMN breed TEXT;
  change from file    sqlite3 pets_database.db < 02_add_column_to_cats.sql.
change data (table)     INSERT INTO cats (name, age, breed) VALUES ('Maru', 3, 'Scottish Fold');
                        we don't have to specify the id column values when we insert data. Primary Key columns are auto-incrementing. 
  change data from file   sqlite3 pets_database.db < 01_insert_cats_into_cats_table.sql
format output         
                      .header on       # output the name of each column
                      .mode column     # now we are in column mode, enabling us to run the next two .width commands
                      .width auto      # adjusts and normalizes column width
                      # or
                      .width NUM1, NUM2 # customize column width
  different colname   alias or AS
                      SELECT AVG(net_worth) AS average_net_worth FROM cats;
  group_by            aggregate function GROUP BY
                        SELECT breed, COUNT(breed) FROM cats GROUP BY breed;
    multiple column     SELECT breed, owner_id, COUNT(breed) FROM cats GROUP BY breed, owner_id; 
    

  order_by            ORDER BY. This modifier allows us to order the table rows returned by a certain SELECT statement.
                        SELECT column_name FROM table_name ORDER BY column_name ASC|DESC;
                          sqlite> SELECT * FROM cats ORDER BY age;
                          
  limit               LIMIT is used to determine the number of records you want to return from a dataset
                        SELECT * FROM cats ORDER BY age DESC LIMIT 1;   returns just the first, i.e. oldest, cat on the list.
  between             SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;
                        SELECT name FROM cats WHERE age BETWEEN 1 AND 3;  


select data           SELECT [names of columns we are going to select] FROM [table we are selecting from];
                        SELECT id, name, age, breed FROM cats;
                        SELECT * FROM cats;
  select unique data    SELECT DISTINCT name FROM cats;
  select on condition   SELECT * FROM [table name] WHERE [column name] = [some value];
                          SELECT * FROM cats WHERE name = "Maru";
                          SELECT * FROM cats WHERE age < 2;
                          SELECT COUNT(*) FROM cats WHERE net_worth > 1000000;

  aggregate functions   functions perform a calculation on specified values, queried from a database table.                        
    select count        the number of records that meet certain condition      
                         "SELECT COUNT([column name]) FROM [table name] WHERE [column name] = [value]"
                          SELECT COUNT(owner_id) FROM cats WHERE owner_id = 1;
    select avverage     SELECT AVG(column_name) FROM table_name;
                        SELECT AVG(net_worth) FROM cats;
    select sum          SELECT SUM(column_name) FROM table_name;
                        SELECT SUM(net_worth) FROM cats;
    select minmax       SELECT MIN(column_name) FROM table_name;
                        SELECT MAX(column_name) FROM table_name;
                      
  select from 2 tables in db
                        SELECT cats.name, dogs.name FROM cats, dogs; must use tablename infront of column name


  see also "format output" section                        
update data           UPDATE [table name] SET [column name] = [new value] WHERE [column name] = [value];
                        UPDATE cats SET name = "Hana" WHERE name = "Hannah";
  null                add data with missing values using the NULL keyword.
                        INSERT INTO cats (name, age, breed) VALUES (NULL, NULL, "Tabby");
                        SELECT * FROM cats WHERE name IS NULL;


                          



                      

                        


delete table  DROP TABLE cats;

help  .help            
quit  .quit
