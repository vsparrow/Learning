ACTIVERECORD ****************************************************************
  AAAA <-ignore used to quick jump to top
  See also ORM:ActiveRecord for more
  CLASS METHODS    
    ATTR_ACCESSORS    get or set attributes of an instance once you've retrieved it:
                        student = Student.find_by(name: 'Jon')
                        student.name          #=> 'Jon' 
                        student.name = 'Steve'
                        student.name          #=> 'Steve'
    change column       change_column(table_name, column_name, type)   (see update table below for file structure)                   
    CREATE A TABLE
                      sql = <<-SQL  CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT) SQL 
                      ActiveRecord::Base.connection.execute(sql)
    CONNECT TO DB
                      connection = ActiveRecord::Base.establish_connection(
                        :adapter => "sqlite3",
                        :database => "db/students.sqlite"  )
    inherit           from ActiveRecord::Base         class Student < ActiveRecord::Base
    update object     And then save those changes to the database:
                        student = Student.find_by(name: 'Jon')
                        student.name = 'Steve'
                        student.save
                        Note that our Student class doesn't have any methods defined for #name either. 
                        Nor does it make use of Ruby's built-in attr_accessor method.
    update table      we need a new migration
                        make new file in migrate. incrrementnumber_ChangeType_ColumnName_to_Classname.rb# 
                          ex: db/migrate/02_add_favorite_food_to_artists.rb
                        in file: 
                            class AddFavoriteFoodToArtists < ActiveRecord::Migration
                              def change
                                add_column :artists, :favorite_food, :string       #rake db:migrate after to run migration
                        
  Console             see TESTING                      
                        
  File structure      every file should require config/environemnt.rb
                      ./CLASSNAME.rb
                        define class. inherit from AR. ex . class Artist < ActiveRecord::Base
                      ./Rakefile
                        require 'sinatra/activerecord/rake' to auto add commands like rake db:migrate, etc                   
                      config/environment.rb
                        create connection to be,create table. run connection.execute(sql db. 
                         also put your require files, and gems like rake here
                      db/migrate/01_create_CLASSNAME.rb  #first file of migrations. numbered so AR knows how to create/reverse
                        def CreateClassName< < ActiveRecord::Migration /n def change /n  CREATE TABLE 
                        
                        
  Migration Methods   used to start a migration. (do search def change to see implementation in ORM)
    up method         define the code to execute when the migration is run          Think of it like "do"
    change method     like up and down combined. more common for basic migrations. AR does automatic changes with change
    down method       define the code to execute when the migration is rolled back. Think of it like "undo."

  TESTING
    rake console      use this rather than irb. it knows the environemnt that is setup
    
  Useage                    CRUD methods for use with AR . see also http://guides.rubyonrails.org/active_record_basics.html#crud-reading-and-writing-data
    Artist                  call the class # => Artist (call 'Artist.connection' to establish a connection)
    A.all                   return array of class items from db  
    A.create(name: 'Kelly') new instance and save
    A.column = value        set a column to a value # a.age = 30
    A.find                  retrieve  from the database by id:       Student.find(1)
    A.find_by(name: 'Jon')  find by name
    A.column_names          list columns
    Artist.new(name: 'Jon') new instance
    a.save                  update/save changes


SORT THIS:::
code go to creating a model, which resides in the app/models folder, and a migration, which resides in the db/migrate folder.
The model inherits from ActiveRecord::Base while the migration inherits from ActiveRecord::Migration
naming conventions: while the migrations are plural, the models are singular.
class names in the migration files must match their file names. For instance, a class in the migration file called 
  20141013204115_create_candies.rb must be named CreateCandies while 
  a class in a migration file called 20130915204319_add_addresses_to_houses.rb must be called AddAddressesToHouses.
Migrations usually have a method called change. In change, you can create a table with the create_table method. 
QURSTION::  model is the class (class Dog < ActiveRecord::Base) while migration creates the table,changes,updates     

create your migration file.       rake db:create_migration NAME=create_movies #Once you have a migration file add columns 
migrate your table                rake db:migrate # After your migration is ready run   
migrate a test database           rake db:migrate SINATRA_ENV=test

ActiveRecordQueryMethods          http://api.rubyonrails.org/classes/ActiveRecord/QueryMethods.html#method-i-where

  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
  Sinatra and Active record steps
    GEMFILE
    add gems      three gems to allow us to use ActiveRecord: activerecord version 4.2.5, sinatra-activerecord, and rake.
                    Make sure those three gems are in your Gemfile:
                  Into development group, we'll add two other gems: sqlite3 and tux.                        
                        gem 'sinatra'  #Gemfile
                        gem 'activerecord', '4.2.5'
                        gem 'sinatra-activerecord'
                        gem 'thin'
                        gem 'require_all'
                        group :development do
                          gem 'shotgun'
                          gem 'pry'
                          gem 'tux'
                          gem 'sqlite3'
                        end                        # end Gemfile
    setup db      Addfollowing code to your environment.rb file (underneath Bundler.require(:default, ENV['SINATRA_ENV'])). 
                      configure :development do
                        set :database, 'sqlite3:db/database.db' #or change to 'sqlite3:db/dogs.db' # for a dogs database
                      end #This sets up a connection to a sqlite3 database named "database.db", located in folder called "db.
    Rakefile      require our config/environment.rb file to load up our environment, as well as the gems we need
                          require './config/environment'
                          require 'sinatra/activerecord/rake' #this will give you tasks that come from Rake -T
    migration:    rake db:create_migration NAME=create_dogs  #now do AR stuff like add def change and create_table
                  rake db:migrate                          
BASH ****************************************************************
SEE ALSO SHELL
variable      is characterized by a dollar sign followed by a variable name.    
                Conventionally, environment variable names consist of all uppercase letters. One example of this is $PATH.                more info   http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/

$PATH         a colon-separated list of paths. Each path is just the location of a directory (or "folder") on your system.
                can be defined in a few different places on your computer:
                For an individual user: ~/.bash_profile  OR  ~/.bashrc
                For global changes: /etc/profile  OR /etc/bashrc
                BASH looks in your .bash_profile first, you should be setting most of your environment variables and methods there 
                when your computer tries to run Ruby? to find the right version, it searches through the directories listed, in order.
                more info   http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/
                
echo $PATH.   terminal should print the value of your $PATH variable. 
                echo $PATH | tr ":" "\n"      
                  this looks like an indecipherable string of characters. So let's replace the colons with line breaks.
                  
ps            get processes
ps aux        a = show processes for all users u = display the process's user/owner x = also show processes not attached to a terminal
                ps aux | grep ruby    find ruby in ps 
                
BLOGGING****************************************************************                  

  Blogs
                    can be about what you're learning, 
                    a technical challenge you overcome, 
                    a walkthrough of something you were initially confused by, 
                    a side project you may be working on, 
                    any cool tips you've learned about anything technical,
                    A bug you ran into
                    A new package, feature, or update
                    How-to guides
                    How-I-made-this
                    Deep dives on topics you’re currently studying

  Blog Confidence
                    Don't assume that, because you are a beginner, you have nothing to contribute. 
                    Your perspective as a beginner is immensely valuable, especially to other beginners.
                    as a new developer, blogging allows you to reflect on what you have learned.

  Blog Examples
  http://www.korenlc.com/
  http://talum.github.io/ Tracy Lum maintained a technical blog while she was a student and TA at Flatiron.  
  https://medium.com/@LindaHaviv/the-beginner-s-guide-scraping-in-ruby-cheat-sheet-c4f9c26d1b8c#.kkwe918o4
  https://medium.com/@sherriously/switching-from-standard-bcrypt-rails-authentication-to-devise-1fd0e910bdda#.fj8ckgksq

  Blog How to
                    Spelling and grammar check!
                    Test your code in console before publishing
                    Cite your sources
                    Include quotes
                    Include code snippets
                    Include gifs

CAPYBARA****************************************************************  

  Capybara    gem for Integration Testing for MVC
              allows us to write code that simulates how a user interacts with our app. 
  Examples
              In our spec/spec_helper.rb file, we add the following code:
              ##########################
              # Load RSpec and Capybara
              require 'rspec'
              require 'capybara/rspec'
              require 'capybara/dsl'

              # Configure RSpec
              RSpec.configure do |config|
                # Mixin the Capybara functionality into Rspec
                config.include Capybara::DSL
                config.order = 'default'
              end

              # Define the application we're testing
              def app
                # Load the application defined in config.ru
                Rack::Builder.parse_file('config.ru').first
              end

              # Configure Capybara to test against the application above.
              Capybara.app = app
              #   we explicitly tell Capybara that the app we're testing against is 
              #   defined in config.ru
              ########################
              example Integration Test 
              spec/application_integration_spec.rb

              require 'spec_helper'

              describe "GET '/' - Greeting Form" do
                it 'welcomes the user' do
                  visit '/' #equivalent to a user typing a URL 
                  expect(page.body).to include("Welcome!")
                end
                # New test
                it 'has a greeting form with a user_name field' do
                  visit '/'

                  expect(page).to have_selector("form")
                  expect(page).to have_field(:user_name)
                end
              end #describe

              describe "POST '/greet' - User Greeting" do
                it 'greets the user personally based on their user_name in the form' do
                  visit '/'
                  fill_in(:user_name, :with => "Avi")
                  click_button "Submit"
                  expect(page).to have_text("Hi Avi, nice to meet you!")
                end
              end

              #Capybara provides two new methods, visit and page.
              #page responds to a lot of methods that represent actions a 
              # user could take on a page, such as click_link, fill_in, and body
              ############################

CSS  ****************************************************************
 Architecture CSS promotes breaking up styles into five core categories, Base,Layout,Module,State,Theme see tools for link
              base category includes core element styles, covering the general defaults. 
              layout category then identifies the sizing and grid styles of different elements, determining their layout. 
              Module styles are more specific styles targeting individual parts of the page, such as navigation or feature styles. 
              state styles are then used to augment or override other styles in the event that a module includes an alternate state,
                an active tab for example. 
              theme category may be added which could include styles based around the skin, or look and feel, of different modules.
  selectors   Keep Selectors Short  for performance
              Favor Classes  
   

 Language
  hsla        Hue Saturation Lightness and Alpha it's a way of declaring color in CSS.    background-color: hsla(170, 50%, 45%, 1);
                similar to RGBa ; declare three values determining the color and then a fourth value for its transparency level.
                The real appeal of HSLa is that it makes more intuitive sense what changing the values will do to the color.
                That makes creating your own color variations on the fly way easier.
                see https://css-tricks.com/yay-for-hsla/
  @import url() 
              allows you to import other css files into your css file. example used to import fonts
  Pseudo-classes                  
              special classes used to add special effects to some selectors, which are applied automatically in certain states.  
                :visited in    a:visited { text-decoration: underline; }
  Pseudo-elements 
              is a specific/unique part of an element that can be used to generate content “on the fly”, automatic numbering and lists. 
                :first-line or :after in  p:first-line { font-variant: small-caps; }  a:link:after { content: " (" attr(href) ")"; }
 
 
 Layout 
  Box Model    Dictates how browser sizes elements. determines actual true size and how much space taken up in layout.
                Every element can be seen as a box. has Wdith, height, padding, margin, border
              IE vs W3C   two different box models:: ie: width specifies content+padding+ border   w3c: width specifies content only  
    IE          to calc "true content space" subtract padding+border from width  
    W3C         "true width" is calculated via adding width(content) padding boder. in IE model, width is true width 
  border      outside element
  box-sizing: property to choose between models # ie is border-box # w3c is content-box  div {box-sizing : border-box }
  center elm  set margin to auto
  clear       see Floating
  content     the element
  display                 csome elements by nature are block like div, others are inline like span. override using display
  display block           appears side by side. not take width or top/bottom margin. 
                            margins dont overlap. width 10px each for 2 spans. get 20px
  display inline          display one above another take whole line. allows width or top/bottom margin
                            margins overlap. so 2 divs with margin 10px each does not make 20px margin, just 10px.
  display inline-block    appears side by side, allows width or top/bottom margin
  display table-cell      elements act liek they are the cells of a table. 
  Floating:   pull elements left or right. affects rlements that come after it but not before
    clear     clear : left, clear anything to the left # clear:right clear anything to right # both: clear both
    clear-fix gives parent elemet that collapses a reference forr how tall to be. take space to surround children
                .clearfix:after {} . it goes in after children and adds a period symbol. tells period to display block
                then clear both to clear floating children above it. then sets the period invisible and hieght and wdith of period to 0
  Height:      body always 100% wide, but only as high as content inside. 
                so if want element to scale 100% browser height, set body and html to 100% also  body,html{height: 100%;min-height: 100%}
  HolyGrail   http://alistapart.com/article/holygrail (at least pre boxmodel/bootstrap
  layers      see Z-index below
  margin      spacing between element and other elm  
                if you add margin, remember it doesnt calculaate into box-model(ie) or w3c sizing so must do math to get sizing right
  overflow    content overflow: visible( content overflows), hidden (content hidden) , scroll, auto (detect and create scroll if need)
  padding     spacing inside element               
  positioning
              relative  take element relative to where it WAS positioned. top:25px push down 25px from top; left:300px push left 200px
              absolute  refer to position relative to relativly possitioned parent or entire browser window.
              fixed     element will stay in palce when browser window scrolls. similar to absolute except for parent clause
              static    no positioning, override any previous positions
  z-index     layer elements on top of each other. by default everything zindex of 0. setting negative means go behind everything
                the higher the number the closer to screen 
  exmaples::  https://learn.co/tracks/web-development-fundamentals/intro-to-html-css/front-end-css-page-layout/css-layout                
 
 Scaling:
  Elastic     em  in proportion to text size changing up and down:  Pro: containers stay in proporation to text 
                Cons: lots of testing as parent containers may start bumping into each other     
                16px = 1em ; if you want box to be ~200px  formula  is 200px/16px = 12.5em    desiredsize/em = neededEM
                so when text gets larger, container will get larger. if body is 2x, 12.5em will size out to 400px
  Fixed       px  Pro: same for all screens  Con:  much whitespace for large screen, small screen might need scrolling
  Fluid       %   based on percentage of space withing parent container Pro: use full screen, eliminate horizontal scroll bar 
                Cons: less control over what user sees 
  Min/Max     set thresholds  for width and hieght 
  
                
 Selectors        (see also Specificity)
  :: 	            pseudo element 	selects some actual content 	0 0 0 1
  : 	            pseudo selector 	selects elements in certain conditions 	0 0 1 0
  A[attribute]    Select all elements that have a specific attribute  (can just be [for]) to select <plate for="luke"> 
                    a[href] selects all a elements that have a href="anything" attribute.
  Attribute Dash seperated    select and attrib that is dash seperated p[class!="dog"]  <p class="new-dog-school">                    
  Attribute Ends With 
                  [attribute$="value"]   Select all elements with an attribute value that ends with specific characters                
  Attribute Starts With               [for^="Sa"]   for SaranWrap and Sardines
                  [attribute^="value"]  Select all elements with an attribute value that starts with specific characters

  [attribute="value"]   Select all elements that have a specific attribute value         
  Attribute Wildcard 
                  attribute*="value"] Select all elements with an attribute value that contains specific characters anywhere
                  mg[src*="/thumbnails/"] selects all image elements that show images from the "thumbnails" folder.
                  [class*="heading"] selects all elements with "heading" in their class, like class="main-heading" class="sub-heading"
  Child           A > B Select direct children of an element
  Child (First)   orange:first-child  Select a first child element inside of another element
  Child none      see :empty
  Child (Last)    pickle :last-child Select the last element inside of another element
  Child (Nth)     Select an element by its order in another element      div p:nth-child(2) selects the second p every div
  Child (Nth Last Child)  This is like nth-child, but counting from the back!
  Child (only)    :only-child  Select an element that are the only element inside of another one.
                    ul li:only-child selects the only li element that are in a ul
  Class Combine   orange.small  <orange class="small">; <orange> ; <apple class="small">  # only choose element orange with class small
  Combinator (Comma)  plate, bento  select element plate and element bento
  Combinator Universal      p *     selects every element inside all p elements. but NOT the p element
  :empty              Selects elements that don't have any other elements inside of them.
  :not(X)             Select all elements that don't match the negation selector
  :focus              will select links that are the current focus of the keyboard. can be used for input as well
  Content related
    ::before        add content before a certain element. ex: adding an opening quote before a blockquote 
                      or perhaps an preceding image to set apart a particular paragraph.
    ::after         add content after a certain element. For example, a closing quote to a blockquote. 
                       Also used commonly for the clearfix, where an empty space is added after the element which clears the float 
                       without any need for extra HTML markup.
  Input
    :checked        Selects checkboxes that are, wait for it, checked.
    :enabled        Selects inputs that are in the default state of enabled and ready to be used.
    :disabled       Selects inputs that have the disabled attribute. 
    :indeterminate  Selects radio buttons that are in the purgatory state of neither chosen or unchosen 
        
  Link              see also :focus
    :active         Selects the link while it is being activated (being clicked on or otherwise activated). 
                      example, for the "pressed" state of a button-style link or to make all links feel more button-like.
    :hover          When the mouse cursor rolls over a link, that link is in it's hover state and this will select it.
    :link           Aren't all <a> links? Well not if they don't have an href attribute. This selects only those that do
    :target         used in conjunction with IDs, and match when the hash tag in the current URL matches that ID. 
                    if at URL www.yoursite.com/#home then the selector #home:target will match. 
                    That can be extremely powerful. For example, you can create a tabbed area where the tabs link to hash tags 
                    and then the panels "activate" by matching :target selectors and (for example) using z-index to move to the top.                  
    :visited        Selects links that have already been visited by the current browser.

  :root             Selects the element that is at the root of the document. Almost certainly will select the <html> element
  Sibling (Adjacent)     p + .intro    selects every element with class="intro" that directly follows a p  (all into next to p)
  Sibling (General)   A ~ B         selects all B that follow a A       B A BB P B   -> this would get the middle two B 
  Text
    ::first-letter  Selects the first letter of the text in the element. Typical use: dropcaps.
    ::first-line    Selects the first line of text in the element. Typical use: setting the first sentence in small-caps as a typographical eye-catcher / lead-in.
    
  Type first-of-type          pickle:first-of-type Selects the first element of that type within another element.
  Type :last-of-type          Selects each last element of that type within another element. Remember type refers the kind of tag,
                                  so p and span are different types. 
  Type :nth-of-type(A)        Selects a specific element based on its type and order in another element 
                                .example:nth-of-type(odd); selects all odd instances of a the example class.
                                div:nth-of-type(2) selects the second instance of a div.
  Type: Nth-of-type with Formula  selects every nth element, starting the count at a specific instance of that element.
                    span:nth-of-type(6n+2) selects every 6th instance of a span, starting from (and including) the second instance.
  Type :only-of-type    Selects the only element of its type within another element.       
  
  
 Specificity
  calculator                  see CSS:Tools
  Equal specificity           the latest rule is the one that counts
  !important                  declaration overrides normal declarations, but avoid it
  link styling                To ensure that you see your various link styles, put your styles in the order 
                                “link-visited-hover-active”, or “LVHA” for short.”
  measure specificity         1000 for inline style , 100 for each ID, add 10 for each attribute, class or pseudo-class, 
                                add 1 for each element name or pseudo-element.
                                ex: body #content .data img:hover  specificity value would be 122 (0,1,2,2 or 0122): 
                                      100 for #content, 10 for .data, 10 for :hover, 1 for body and 1 for img. 
 
 Text
  em                          see Layout: Elastic             
 
 Tools
  adobe color scheme tool     https://color.adobe.com/create/color-wheel/
  architecture layout         https://learn.shayhowe.com/advanced-html-css/performance-organization/
  reference                   https://developer.mozilla.org/en-US/docs/Web/CSS/Reference   
  specificity calculator      https://specificity.keegan.st/
  validator                   http://jigsaw.w3.org/css-validator/


 Examples:  
  Rainbow:                      div {  /*https://github.com/learn-co-students/my-little-rainbow-cb-000*/
                                border: 20px solid #000; /* this is short hand for setting the border's width, its type, and color */
                                display: inline-block; /* a way of positioning elements */
                                min-width: 20em; /* the two min styles make the shape */
                                min-height: 25em; /* of the divs oblong*/
                                border-radius: 50%; /* this makes the normally square div round */
                                border-left-color: transparent; /* these remove the color from the left side */
                                border-right-color: transparent; /* the right side */
                                border-bottom-color: transparent; /* and the bottom of the circle */ }


ERB  ****************************************************************
Embedded Ruby         ERB and other templating engines allow us to modify the content and structure of our HTML code.
  Substituion tag     <%= and closes with %>. Inside of these tags, you can write any valid Ruby code that you want.
  Scripting tags      <% and close with %>. They evaluate –– but do not actually display –– Ruby code.

hashes
                      ERB assumes the name of top-level hash is the first key,
                      so code to call value associated with the nested "name" key would be student["name"].
                          params = { #MULTIPLE COURSES
                            "student" => {
                              "name" => "Vic",
                              "grade" => "12",
                              "courses" => [  # <- ARRAY
                                {
                                  "name" => "AP US History",
                                  "topic" => "History"
                                },
                                {
                                  "name" => "AP Human Geography",
                                  "topic" => "History"
                                }
                              ]  # <- end ARRAY
                            }
                          }

  Hashes
    forms
                        Instead of manually indexing each entry, we can use an empty array ([]) in our form view,
                         and ERB will automagically index the array for us,
                         turning my_hash["student"]["courses"][0]["name"] into student[courses][][name]    
                              <form action="/student" method="post">
                                Student Name: <input type="text" name="student[name]">
                                Student Grade: <input type="text" name="student[grade]">
                          #we dont need to add value in erb, we would in RUBY erb assumes value by placement
                                Course Name: <input type="text" name="student[courses][][name]">  
                                Course Topic: <input type="text" name="student[courses][][topic]"> 
                                Course Name: <input type="text" name="student[courses][][name]">
                                Course Topic: <input type="text" name="student[courses][][topic]">
                                <input type="submit">
                              </form>  
  EXAMPLES
                      <% if 1 == 2 %>
                        <p>1 equals 2.</p>
                      <% else %>
                        <p>1 does not equal 2.</p>
                      <% end %>

                      <% if logged_in? %>
                        <a href="/logout">Click here to Log Out</a>
                      <% else %>
                        <a href="/login">Click here to Log In</a>
                      <% end %>
                      
                      Iteration EACH example
                        <ul>
                          <% squares = [1, 4, 9, 16] %>
                          <% squares.each do |square| %>
                            <li><%= square %></li>
                          <% end %>
                        </ul>
                      EACH example
                        <ul>
                          <% wall_posts.each do |post| %>
                            <li><%= post %></li>
                          <% end %>
                        </ul>
                        
                        

GIT  ****************************************************************
abort                               see git merge abort
git cheet sheet                     https://www.git-tower.com/blog/content/posts/54-git-cheat-sheet/git-cheat-sheet-large01.png
git branch                          to see all of the branches
                                      see git checkout to get branches of a fork
                                      git branch -D doc-brown to delete the doc-brown branch
git branch -u o/master foo          set remote tracking on a branch, set the foo branch to track o/master. see also git co -b                                      
git add .                           to add your local changes to be committed.
git checkout head^                  go to head's parent (the caret operator says parent)
git checkout head~4                 move up 4 commits from head
git checkout master                 get to master branch
git checkout -b totallyNotMaster o/master . 
                                    Creates a new branch named totallyNotMaster and sets it to track o/master.
                                    see also git branch -u
git checkout -t origin/doc-brown    This creates a new branch on your computer that matches thedoc-brown branches on GitHub.
git cherry-pick <Commit1> <Commit2> <...>
                                    you would like to copy a series of commits below your current location (HEAD).
                                      Will plop down a commit from anywhere in the tree onto HEAD (as long as that commit 
                                        isn't an ancestor of HEAD).                                   
git clone                           to clone a repository to your local computer.
                                        To clone, make sure you've clicked on the SSH link (it starts with git@github.com:
colon refspec                       see git push origin:source
git commit -am "Commit Message"     to commit changes that have been added with a message.
git delete                          see git branch
git describe                        describe where you are relative to the closest "anchor" (aka tag). see git tag
                                      git describe <ref>  Where <ref> is anything git can resolve into a commit. 
                                      If you don't specify a ref, git just uses where you're checked out right now (HEAD).
                                      
                                      output of the command looks like:  <tag>_<numCommits>_g<hash>
                                      Where tag is the closest ancestor tag in history, numCommits is how many commits away 
                                      that tag is, and <hash> is the hash of the commit being described.
git diff                            by itself doesn’t show all changes made since your last commit — only changes that are 
                                      still unstaged. If you’ve staged all of your changes, git diff will give you no output
git diff --staged                   If you want to see what you’ve staged that will go into your next commit   
                                      --staged and --cached are synonyms):
git fetch                           fetch data from a remote repository           
                                      downloads the commits that the remote has but are missing from our local repository,
                                      updates where our remote branches point (for instance, o/master)
                                      brings localinto synchronization with remote repository looks like
                                        ***does not change anything about your local state. not update your master branch or 
                                              change anything about how your file system looks right now. just a download step
                                              see also git pull
                                        git fetch (<source>:<destination>) works like git push origin (<source>:<destination>)
                                        but <source> is now a place on the remote and <destination> is a local place 
git fetch origin foo                go to the foo branch on the remote, grab all the commits that aren't present locally,
                                     and then plop them down onto the o/foo branch locally.                                       
git fetch origin :<destination>     creates destination locally from head of origin
force                               git branch -f master HEAD~3 #directly reassign a branch to a commit with the -f option.
                                      moves (by force) the master branch to three parents behind HEAAD                                   
GITHUB FORK                         Forking is the process of making a personal copy of the Learn lab on GitHub
Interactive Rebase                  see git rebase -i
git log                             
                                      --stat    see abbreviated stats for each commit
                                      -p or --patch, shows the difference (the patch output) introduced in each commit. 
                                      --pretty=oneline    see on one line
                                      --pretty=format:"%h - %an, %ar : %s" #format, allows specify your own log output format.
                                      --since=2.weeks   lookup limiting log output
                                      -S option (Git’s “pickaxe” option), takes a string and shows only those commits 
                                        that changed the number of occurrences of that string.

git merge abort                     when you merge and want to go back. see also "reset head^"
git merge doc-brown                 add the doc-brown branch to the master branch #irst do git co master to make sure we are on master!
                                      <<<HEAD - the beginning of the original branch (master)
                                      === - the end of original branch/beginning of the branch being merged in (marty-mcfly)
                                      >>> marty-mcfly - the end of the new branch ( marty-mcfly)
merge without forwarding branch    
                                    https://stackoverflow.com/questions/5601931/best-and-safest-way-to-merge-a-git-branch-into-master  
git mv file_from file_to            move files
move head                           git co branchname; git reset CommitNameorID;  ie: git co side; git reset C3'
github pull request(web)            Submitting a pull request is how you submit your lab to be evaluated or graded 
                                      shorthand for a git fetch followed by a merge of whatever branch was just fetched.
                                      it pull --rebase is shorthand for a fetch and a rebase!
git pull origin foo                 equal to: git fetch origin foo; git merge o/foo
git pull origin bar~1:bugFix        equal to: git fetch origin bar~1:bugFix; git merge bugFix                                     
                                                                            
git push                            to upload your local changes to GitHub.
                                      git push origin master
                                      git push prigin contact-page   #if pushing to branch other than master 
git push -u branch-name             sets this information for the branch you're pushing.
                                      important if created branch locally, then tells remote that you push to new branch
git push origin <source>:<destination>
                                    specify both source and destination of <place>, join the two together with a colon:
                                      referred to as a colon refspec. Refspec is just a fancy name for a location 
                                      that git can figure out (like the branch foo or even just HEAD~1)                                     
                                      if destination doesnt exist it is created 
git push origin :<destination>      notice no <source>? it will delete the remote destination because it merges "nothing"                                      
git rebase master                   move head of one branch into another -> look into this deeper
                                      see alsos git pull # it pull --rebase is shorthand for a fetch and a rebase!
git rebase -i NAME                  interactive rebase means is using the rebase command with the -i option.
                                      git will open up a UI to show you which commits are about to be copied below the target
                                      of the rebase. It also shows their commit hashes and messages
                                      
relative reference                  see git checkout head~4
                                      takes in a trailing number that specifies the number of parents you would like to ascend.
git remote                          lists the shortnames of each remote handle you’ve specified
                                       -v, shows URLs that Git has stored for the shortname to be used when reading and 
                                        writing to that remote:
git remote add <shortname> <url>    add a new remote Git repository as a shortname you can reference easily
git remote show <remote>            see more information about a particular remote   (git remote show origin) 
git remote rename                   change a remote’s shortname. ex rename pb to paul,  git remote rename pb paul
git reset --hard <commit id>        will move a branch backwards as if the commit had never been made in the first place.
                                      git reset HEAD~1 . (moves head up 1).   Does not work for remote branch, use revert.
git revert                          reverse changes and share those reversed changes with others,
                                      a new commit below the commit we wanted to reverse. 
                                      new commit C2' introduces changes that exactly reverses the commit of C2.
git rm                              remove file : remvoe from git  and remove from working directory so its not untracked
git status                          to see the status of your locally cloned git repository.
git tag                             (somewhat) permanently mark certain commits as "milestones" that you can reference 
                                      like a branch. More importantly though, they never move as more commits are created.
                                      You can't "check out" a tag and then complete work on that tag -- tags exist as anchors
                                      in the commit tree that designate certain spots.
                                      git tag v1 C1 # a tag at C1 which is our version 1 prototype
                                      see also git describe
^ modifier                          Like the ~ modifier, the ^ modifier also accepts an optional number after it.
                                      the modifier on ^ specifies which parent reference to follow from a merge commit.
                                      Remember that merge commits have multiple parents, so the path to choose is ambiguous.
                                      Git will normally follow the "first" parent upwards from a merge commit, 
                                      but specifying a number with ^ changes this default behavior.


FILES:
.gitignore                          

CheetSheet
                                    git checkout -b columns
                                    git add . 
                                    git commit -m "add columns and fixed header and social bar" 
                                    git push -u origin columns 
                                    git checkout master 
                                    git merge columns 
                                    git push origin master 

HTML ****************************************************************  

CODE numeric
  301 redirects     ensure that users and search engines are directed to the correct page. useful for website moves or multiple domains
  404               error page, guide user back to a useful page


Ecosystem
  character sets        https://www.w3schools.com/html/html_charset.asp
  cheetsheet            http://www.simplehtmlguide.com/cheatsheet.php               see also element reference
  element reference     https://developer.mozilla.org/en-US/docs/Web/HTML/Element   see also cheetsheet
  folder structure    [site(parent folder) + .html] [subfolders: css/fonts/images/js] 
  wireframe   hand drawn or digital mockups of what the page should look like
  Validator   http://validator.w3.org/

GOOGLE
  anchor rel=nofollow   tells google you don't vouch for these links. used often for comments pages. linking to spam affects your rep
  anchor text   the text tells google what your are link to, have good text to help AI and users
  copywrite     symbol  &copy;
  img alt text  used as anchor text if image is a link
  maps          pres ||| on google map to share so that you can embed map
  mobile        verify your sites show up in google mobile.
                switch content based on user agent
  robots.txt    tells engines if they can crawl your site 
  SEO guide     www.google.com/en/us/webmasters/docs/search-engine-optimization-starter-guide.pdf
  
  Tools:         Google Website Optimizer / Google Webmaster Tools /Google Analytics

Language        See https://developer.mozilla.org/en-US/docs/Web/HTML/Element or http://www.simplehtmlguide.com/cheatsheet.php
  anchor      see also HTML:GOOGLE
  anchor a    link tag. 
  audio       embed audio. can have multiple <source> elements inside to have diffferent audio file types. similar to <video>
  bold        see strong
  Definition List   <dl>     <dt>First term</dt>     <dd>Definition</dd>     <dt>Next term</dt>     <dd>Definition</dd></dl>
  description see metaname:description
  <em>        <em>This text is emphasized</em>    italics
  figure      <figure>
    figcaption  inside figure  info that appears under image, often whome photo is by, or things related to image/figure above 
  form          get data ::   also lookup "input"   see also "select"
  form action   specify location where all the info gathered is sent to
  for label     is a text label that relates to an input below it <label for="fullname">Name</label><input id="fullname"></input>
                  so if click on text "Name" will move cursor to input fullname
  form method   get/post    how method is sent. in "get" method, info is used as part of URL as query string, &username=COOL+developer
  form textarea for multi line items , block
  footer       https://css-tricks.com/snippets/css/sticky-footer/
  iframe       embed window inside page, for other websites, or pages. like a google maps on your restaurant homepage, or youtube vid
  input        input for forms, type="" have many types; name="" label for info sent to server  very important!,
                palceholder="" stays unil user types, a reminder to user; required  means user must configure or else errr if blank
                see "forms"
  italics     see em
  metaname  
    description  gives search engine summary of what page is about. could be a scentance or 2. might become google description of page 
  <pre>       <pre>This text is preformatted</pre>
  section     section off some area
  select      used inside of a form, creates drop downs. see "forms" above. 
  <strong>    <strong>This text is strong</strong>  make the text bold
  title       tells users/searchengines what topic of a page is.ideally uniqe to each page. becomes first line of serch results. few words
  <video>     embed video, see <audio> also
    <video controls>  so controls always visible

 Tools
  
  Modernizr   JS library that detects HTML5 and CSS3 features of user's browser    


MARKDOWN *************************************************************

 Github Markdwon
  basic formatting      https://help.github.com/articles/basic-writing-and-formatting-syntax
  daring vs github      GitHub Flavored Markdown is a superior variant.
                          https://daringfireball.net/linked/2009/10/23/github-flavored-markdown
  
 Language (github markdown)
  bold                  **This is bold text**	
  bold AND italic       **This text is _extremely_ important** .   #extremly will be italic and bold
  headings              The number of # you use will determine the size of the heading.
                          # The largest heading
                          ## The second largest heading
                          ###### The smallest heading
  ignore markdown       tell GitHub to ignore (or escape) Markdown formatting by using \ before the Markdown character.
                          Let's rename \*our-new-project\* to \*our-old-project\*.
  italic                *This text is italicized*	      #see also "bold AND italic"
  links                 This site was built using [GitHub Pages](https://pages.github.com/).
    reference issues/pull requests
                          You can bring up a list of suggested issues and pull requests within the repository by typing #.
                            https://help.github.com/articles/basic-writing-and-formatting-syntax/#referencing-issues-and-pull-requests
    relative links        [Contribution guidelines for this project](docs/CONTRIBUTING.md)
                            Relative links are easier for users who clone your repository. Absolute links may not work in 
                            clones of your repository - we recommend using relative links to refer to other files 
                            within your repository.
    section links         https://help.github.com/articles/basic-writing-and-formatting-syntax/#section-links
    short link            https://help.github.com/articles/autolinked-references-and-urls/
  lists                 You can make an unordered list by preceding one or more lines of text with - or *.
    nested lists        Type space characters in front of your nested list item, until the list marker character (- or *) 
                          lies directly below the first character of the text in the item above it.
                          1. First list item #https://help.github.com/articles/basic-writing-and-formatting-syntax/#nested-lists
                             - First nested list item
                               - Second nested list item . 
    task lists            To create a task list, preface list items with [ ]. To mark a task as complete, use [x].    
                            Ifitem description begins with a parenthesis, you'll need to escape it with \:
                            - [ ] \(Optional) Open a followup issue
  mention               mention a person or team on GitHub by typing @ plus their username or team name.
  quote                 > Pardon my French
  quote code            
    within a line       Use `git status` to list all new or modified files    #see the single tick
    code block            ```
                          git add
                          git commit
                          ```
    code with syntax highlight
                        add an optional language identifier to enable syntax highlighting in your fenced code block.
                          ```ruby
                          require 'redcarpet'
                          markdown = Redcarpet.new("Hello World!")
                          puts markdown.to_html
                          ```             #would highlight the ruby syntac
  striketrhough         ~~This was mistaken text~~	

MVC  *****************************************************************
Model View Controller
  Model         Our models do the job of interacting with the database 
  Views         Views present information to the user. 
                  Any code that is responsible for presenting data or output to the user
                    from methods that use a bunch of puts, to HTML, to ERB templates 
  Controllers   Controllers provide the main interface and application logic. 
                  What data should I show a user in response to certain input from that user"
                  represented by classes
  
  MVC Flow      user -> view ->controller -> model -> DB -> controller ->view ->user
  MVC Location  
    APP DIRECTORY       holds our MVC directories - models, views, and controllers. 
                          We spend most of our time coding in this directory.
    CONTROLLERS DIR     where the app configs, routes, and controller actions are implemented. There is typically a class,
                          in this case we will call ApplicationController, that represents an instance of your application
                          when the server is up and running. 
                          Controllers represent the application logic, generally; the interface and flow of our application.
    MODELS DIRECTORY    holds the logic behind our application. represent either a component of your application, 
                          such as a User, Post, or Comment, or a unit of work. 
                          Each file in models typically contains a different class.  
    VIEWS DIRECTORY     holds the code that will be displayed in the browser.
                          In Sinatra use .erb files instead of .html files because .erb allow us to include HTML tags 
                          AND special erb tags which contain Ruby code.
                          
                          
  Tests
    Unit tests          test the models in our application and how they interact with our database. 

    Controller tests    test that the code responsible for delivering the appropriate data to a user is working properly. 
                         In  web app,  make sure HTTP request returns the expected HTTP RESPONSE. not HTML or forms  

   Integration tests    are the highest-level test 
                          closest to describing how a user will actually interact with app. 
                          Commonly referred to as 'End-to-End' 
                          flex your entire application stack (i.e., all of the MVC components)(done with Capybara)

ORM  *****************************************************************
  AR                  SEE ALSO UPDATED AR SECTION AT TOP
  ActiveRecord:       way of doing orm through ruby using only gem. see below
  ActiveRecord       it does build out a bunch of methods for you.
                      create a database that interacts with your class with only a few lines of code.
                        creates a model, which resides in the app/models folder, model inherits from ActiveRecord::Base
                        creates a migration, which resides in the db/migrate folder.  migration inherits from ActiveRecord::Migration
                          for rails mau need to spec version: ex ActiveRecord::Migration[5.1]
  AR Association models
                      app/models/artist.rb
                        class Artist < ActiveRecord::Base
                          has_many :songs
                          has_many :genres, through: :songs
                        end
                      app/model/song.rb
                        class Song < ActiveRecord::Base
                          belongs_to :artist
                          belongs_to :genre 
                        end

                        The macros we implemented in our classes allow us to associate a song object directly to an artist object:
                          pry: hello.artist = adele
                        If you tell the parent that a certain child object has been added to its collection, 
                        both the parent and the child will know about the association. But not in reverse
                          rolling_in_the_deep = Song.new(name: "Rolling in the Deep")
                          adele.songs << rolling_in_the_deep
                          rolling_in_the_deep.artist #get adele
                          pop = Genre.create(name: "pop")
                          pop.songs << rolling_in_the_deep
                          pop.songs #rolling in deep 
                          rolling_in_the_deep.genre  #pop
                          pop.artist #adele (even though we didnt explicitly mention this  
  DYNAMIC             see below                        
  migration           creates the table
                      class names in the migration files must match their file names. 
                        ex a class in the migration file called 20141013204115_create_candies.rb must be named CreateCandies
  model               creates objects from table 
  
                      ./db/migration/01_create_artists.rb
                                class CreateArtists < ActiveRecord::Migration
                                  def up      #code to execute when the migration is run          #like do
                                  end
                                  def down    #code to execute when the migration is rolled back. #like undo
                                  end
                                  # AR table methods:   remove_table, rename_table, remove_column, add_column see for more: http://guides.rubyonrails.org/migrations.html#writing-a-migration
                                  def change  #more common for basic migrations. works for the majority of cases, where Active Record knows how to reverse the migration automatically
                                    create_table :artists do |t|  #create artists table without ORM sql statements and DB.execute
                                      t.string :name              #left is data type we'd cast the column as, and on the right is the name we'd like to give the column.
                                      t.string :genre             #primary key automatically made by AR, no need to include
                                      t.integer :age
                                      t.string :hometown
                                    end #create_table
                                  end#change
                                end #class
                      ./Rakefile
                                require_relative './config/environment'
                                require 'sinatra/activerecord/rake'   #the list of gems we need
                      ./config/environment.rb         This file is requiring the gems in our Gemfile and giving our program access to them.
                                require 'bundler/setup'
                                Bundler.require
                                # method from AR to connect to our artists database, which will be created in the migration via SQLite3 (the adapter).
                                ActiveRecord::Base.establish_connection( # put the code to connect to the database here
                                  :adapter => "sqlite3",
                                  :database => "db/artists.sqlite"
                                )                             
                      ./artist.rb 
                                class Artist < ActiveRecord::Base end
                      bundle exec rake db:migration     #create table
                      bundle exec rake console #to get into console  
                      in console:
                                Artist                       Check that the class exists
                                Artist.column_names         View the columns in its corresponding table in the database:
                                a = Artist.new(name: 'Jon') #instantiate a new Artist named Jon,  
                                a.age = 30                   #set his age to 30,
                                a.save                        #and save him to the database: (hes in memory but not written to file)
                                Artist.create(name: 'Kelly')  # create a new instance and save it all in one go, we can use .create.
                                Artist.all                    #Return an array of all Artists from the database:
                                Artist.find_by(name: 'Jon')   #Find an Artist by name:
                                OTHER METHODS CRUD            http://guides.rubyonrails.org/active_record_basics.html#crud-reading-and-writing-data
                      ./db/migrate/02_add_favorite_food_to_artist.rb #incremental named se we can roll forward when replaying db
                                class AddFavoriteFoodToArtists < ActiveRecord::Migration
                                  def change          #tell AR to add column to artists
                                    add_column :artists, :favorite_food, :string
                                  end
                                end
                       rake db:rollback       #rollback add fooood
     ActiveRecord in use  https://github.com/vsparrow/activerecord-crud-v-000
                       ./app/movie_controller.rb
                        def can_be_instantiated_and_then_saved /n movie = Movie.new /n movie.title = "This is a title." /n movie.save /n end
                        can_be_created_with_a_hash_of_attributes
                          attributes = { title: "The Sting", release_date: 1973  }
                          movie = Movie.create(attributes)
                        can_be_created_in_a_block
                          Movie.create do |m|    m.title ="Home Alone" m.release_date =1990 end
                        can_get_the_first_item_in_the_database
                          movie=Movie.first
                        can_get_the_last_item_in_the_database
                          m=Movie.last
                        can_get_size_of_the_database
                          m_count=0
                          Movie.find_each do |m|    m_count+=1 end
                          m_count
                        can_find_the_first_item_from_the_database_using_id
                          m=Movie.find_by id: 1
                        def can_find_by_multiple_attributes
                          m=Movie.find_by title: "Title", release_date: 2000, director: "Me"
                        def can_find_using_where_clause_and_be_sorted
                          # For this test return all movies released after 2002 and ordered by # release date descending
                          m=Movie.where("release_date > 2002").order release_date: :desc
                        def can_be_found_updated_and_saved
                          # Updtate the title "Awesome Flick" to "Even Awesomer Flick"
                          m=Movie.find_by title: "Awesome Flick"
                          m.update_attribute(:title,"Even Awesomer Flick")
                        def can_update_using_update_method
                          # Update movie title to "Wat, huh?"
                          Movie.create(title: "Wat?")
                          m=Movie.find_by title: "Wat?"
                          m.update title: "Wat, huh?"
                        can_update_multiple_items_at_once
                          # Change title of all movies to "A Movie"
                          5.times do |i|    Movie.create(title: "Movie_#{i}", release_date: 2000+i) end . #creates movies
                          Movie.update_all title: "A Movie"
                        def can_destroy_a_single_item
                          Movie.create(title: "That One Where the Guy Kicks Another Guy Once")
                          movie_id = Movie.find_by(title: "That One Where the Guy Kicks Another Guy Once")
                          Movie.destroy(movie_id)
                        def can_destroy_all_items_at_once
                          10.times do |i|    Movie.create(title: "Movie_#{i}") end
                          Movie.destroy_all #https://apidock.com/rails/ActiveRecord/Relation/destroy_all
                          
                        Inside app/models/show.rb class Show 
                        def self.highest_rating #  returns the TV show with the highest rating (FAILED - 1)
                          show = Show.maximum(:rating)
                        def self.most_popular_show    #returns the tv show with the highest rating (FAILED - 2)
                          highest = self.highest_rating
                          show = Show.find_by rating: highest
                        def self.lowest_rating    #returns the TV show with the lowest rating (FAILED - 3)
                          show=Show.minimum(:rating)
                        def self.least_popular_show  #returns the tv show with the lowest rating (FAILED - 4)
                          lowest = self.lowest_rating
                          # show = Show.find_by rating: lowest
                          # show
                          show = Show.where("rating = ?",lowest)
                          show[0]
                        def self.ratings_sum    #returns the sum of all the ratings of all the tv shows (FAILED - 5)
                          Show.sum(:rating)
                        def self.popular_shows    #returns an array of all of the shows with a rating above 5 (FAILED - 6)
                          Show.where("rating > ?",5)
                        def self.shows_by_alphabetical_order  Show.order(:name)
                                                  
  Object Relational Mapping   the technique of accessing a relational database using an object-oriented programming language. 
                                a way for our Ruby programs to manage database data by "mapping" database tables to classes and 
                                instances of classes to rows in those tables.
                              An ORM is really just a concept. When "mapping" our program to a database, we equate classes 
                                with database tables and instances of those classes with table rows.
    Goal                      the goal of our dynamic ORM is to define a series of methods that can be shared by any class.
                                So, we need to avoid explicitly referencing table and column names.
    class to table            convention : pluralize name of class to create name of table. 
                                Therefore, the Song class equals the "songs" table.
    database
      AR mechanics            ActiveRecordMechanics   see https://learn.co/lessons/active-record-mechanics-crud
                                use this to add SQL access methods that AR has into your class, example class Car
      database connect AR     connection = ActiveRecord::Base.establish_connection( #this is using ActiveRecord
                                :adapter => "sqlite3",:database => "db/students.sqlite") #see also db create
      database create         who responsible? class responsible for table, so program asa whole responsible for db
                                in config/environment.db
                                  require 'sqlite3'
                                  require_relative '../lib/song.rb'
                                  DB = {:conn => SQLite3::Database.new("db/music.db")}

                                  
                                  see also https://learn.co/lessons/orm-mapping-db-to-ruby-object for some methods
                                 In lib/song.rb file, we access the DB constant and db connection it holds like this: DB[:conn]
      database use hash       DB[:conn].results_as_hash = true
                                  when SELECT statement don't return row as an array, return it as a hash 
                                    with the column names as keys.      
                                  DB[:conn].execute("SELECT * FROM songs LIMIT 1") .  Before:[[1, "Hello", "25"]]
                                    after: {"id"=>1, "name"=>"Hello", "album"=>"25", 0 => 1, 1 => "Hello", 2 => "25"}
      class create table
                                class Song
                                  attr_accessor :name, :album, :id
                                  def initialize(name, album, id=nil)
                                    @id = id,@name = name,@album = album    end
                                  def self.create_table
                                    sql =  <<-SQL       #this is called a heredoc, read more about it in RUBY:strings 
                                      CREATE TABLE IF NOT EXISTS songs (
                                        id INTEGER PRIMARY KEY, 
                                        name TEXT, 
                                        album TEXT
                                        )
                                        SQL
                                    DB[:conn].execute(sql) 
                                  end
                                end
                                
       class new vs save       #new method creates a new instance of the song class, a new Ruby object. 
                                The #save method takes the attributes that characterize a given song and saves them in 
                                  a new row of the songs table in our database.                         
       class save to table     we are not saving Ruby objects in our database. We are going to take the 
                                   individual attributes of a given instance, and save those to table
                                      def save
                                        if self.id    #if item already exists (because we have an id#
                                          self.update #update instead
                                        else          #else actually save to db
                                         sql = <<-SQL
                                            INSERT INTO songs (name, album) 
                                            VALUES (?, ?)
                                          SQL
                                          DB[:conn].execute(sql, self.name, self.album)
                                          @id = DB[:conn].execute("SELECT last_insert_rowid() FROM songs")[0][0]
                                            #above sets @id after saving to db, can be left out if @id not need to be filled 
                                        end #if
                                      end  #save  
        class create method         how we call below:: Song.create(name: "Hello", album: "25")
                                  def self.create(name:, album:)
                                    song = Song.new(name, album)
                                    song.save
                                    song
                                  end
        create table AR           sql = <<-SQL CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY,name TEXT)SQL
                                    ActiveRecord::Base.connection.execute(sql)     
                                    then add AR to class-> .   class Student < ActiveRecord::Base end
        database return map       sql = "SELECT * FROM songs"
                                    DB[:conn].execute(sql).map do |row| self.new_from_db(row)    end
                                    what happens here is that get all items from db, which comes in as [[1]]
                                    map it to flatten it to a single array. then you can do @name=row[0], etc.
                                    
        dynamic methods           table_name : create table name from class name
                                    def self.table_name  /n  self.to_s.downcase.pluralize    /n end
                                      #pluralize method is by active_support/inflector library,required at top of lib/song.rb.
                                  column_names:create colum names dynamically
                                    def self.column_names
                                      DB[:conn].results_as_hash = true #set hash results from select rather than array
                                      sql = "PRAGMA table_info('#{table_name}')" #get column names from table
                                      table_info = DB[:conn].execute(sql)         
                                      column_names = []                           #blank list of names
                                      table_info.each do |column|
                                        column_names << column["name"]
                                      end
                                      column_names.compact                        #compact gets rid of all nil if we find any
                                    end
                                    #column_names: we can use this collection to create the attr_accessors of our Song class.
                                      self.column_names.each do |col_name|
                                        attr_accessor col_name.to_sym
                                      end
                                    #initialize that is dynamic
                                      def initialize(options={})
                                        options.each do |property, value|
                                          self.send("#{property}=", value)
                                        end
                                      end
          class name to tablename   # class.table_name is a method that 
                                        Guesses the table name (in forced lower-case) based on the name of the class i
                                      def table_name_for_insert /n self.class.table_name /n end
          attr_accessor to column names
                                    # method for grabbing the column names of the table associated with a given class:
                                     def col_names_for_insert
                                        self.class.column_names.delete_if {|col| col == "id"}.join(", ")
                                     end .                                  #returns   "name, album"
                                        without the join , this will return:  ["name", "album"]
                                          and we dont want to create the id columns, the db will
                                            if no delete_if . then we would get ["id", "name", "album"]
                                     #lexible ways to grab each of the constituent parts of the SQL statement to save a record 
                                      see Abstracting the Values to Insert in https://learn.co/lessons/dynamic-orms-readme
                                     def values_for_insert
                                        values = []
                                        self.class.column_names.each do |col_name|
                                          #use #send method with each colname to invoke the method by that same name and 
                                            #capture the return value:
                                          values << "'#{send(col_name)}'" unless send(col_name).nil?
                                        end
                                        values.join(", ") . #join array into string
                                      end
          save
                                      def save
                                        sql = "INSERT INTO #{table_name_for_insert} (#{col_names_for_insert}) VALUES (#{values_for_insert})"
                                        DB[:conn].execute(sql)
                                        @id = DB[:conn].execute("SELECT last_insert_rowid() FROM #{table_name_for_insert}")[0][0]
                                      end
          FIND_BY_NAME              
                                      def self.find_by_name(name)
                                        sql = "SELECT * FROM #{self.table_name} WHERE name = #{name}"
                                        DB[:conn].execute(sql)
                                      end

          inflector                   pluralize an item. see sldo ORM:dynamic methods above 
  Dynamic                     see below under example for dynamic examples
                                    
  Example                     connect DB: database_connection = SQLite3::Database.new('db/pets.db')
                              create an owners table : database_connection.execute("CREATE TABLE IF NOT EXISTS cats(
                                id INTEGER PRIMARY KEY, name TEXT, breed TEXT, age INTEGER)")
                              create a cats table: database_connection.execute("CREATE TABLE IF NOT EXISTS owners(
                                id INTEGER PRIMARY KEY, name TEXT)")
                              insert new cats in tables : database_connection.execute("INSERT INTO cats (name, breed, age) 
                                VALUES ('Maru', 'scottish fold', 3)")
                              insert new owners into tables: database_connection.execute("INSERT INTO cats (name, breed, age) 
                                VALUES ('Hana', 'tortoiseshell', 1)")
                              Notice that in the lines of code above, there is a lot of repetition.
                              INSTEAD CAN USE BELOW!
                                class Cat
                                  @@all = []
                                  def initialize(name, breed, age)
                                    @name = name
                                    @breed = breed
                                    @age = age
                                    @@all << self
                                  end
                                  def self.all
                                    @@all
                                  end
                                  def self.save(name, breed, age, database_connection)
                                    database_connection.execute("INSERT INTO cats (name, breed, age) VALUES (?, ?, ?)",name, breed, age)
                                  end
                                end

                                database_connection = SQLite3::Database.new('db/pets.db') 
                                Cat.new("Maru", "scottish fold", 3)
                                Cat.new("Hana", "tortoiseshell", 1)
                                Cat.all.each do |cat|
                                  Cat.save(cat.name, cat.breed, cat.age, database_connection)
                                end

                                def self.find(id,db)
                                  name = db.execute("SELECT name FROM pokemon WHERE id=#{id}")
                                  type = db.execute("SELECT type FROM pokemon WHERE id=#{id}")
                                  pokemon=self.new(id,name[0][0],type[0][0])  
                                  #not sure why need 2d array but returns coming in as [["Pikachu"]]
                                end #find
                                
                                find column if exists and save (PRAGA returns all columns)
                                def self.save(name,type,db)
                                  pokemon_save= db.execute("INSERT INTO pokemon (name,type) VALUES (?,?)",name, type)
                                  hp_found=nil
                                  pragma=db.execute('PRAGMA table_info(pokemon)');
                                  pragma.each  {|hp| hp_found = true if hp[1]=="hp"}
                                  db.execute("UPDATE pokemon SET  hp = 60 WHERE name = '#{name}';") if hp_found == true;
                                  pokemon_save
                                end #save
                                
                                def self.find_or_create_by(name:, album:)
                                  song = DB[:conn].execute("SELECT * FROM songs WHERE name = ? AND album = ?", name, album)
                                  if !song.empty?
                                    song_data = song[0]
                                    song = Song.new(song_data[0], song_data[1], song_data[2])
                                  else
                                    song = self.create(name: name, album: album)
                                  end
                                  song
                                end      
                                
  DYNAMIC ORM methods
  
                                def self.table_name
                                  self.to_s.downcase.pluralize
                                end

                                def self.column_names
                                  sql = "PRAGMA table_info('#{self.table_name}')"
                                  table_info = DB[:conn].execute(sql) #PRAGMA return which is a array of hashes
                                  column_names = []
                                  table_info.each do |col_name|
                                    column_names << col_name["name"]
                                  end
                                  column_names.compact
                                end

                                #program the attr_accessor
                                #outside in the class so when called attr_accessor is setup
                                self.column_names.each do |col_name|
                                  attr_accessor col_name.to_sym
                                end
                                # now that we have attr_accessor we can build out initialize
                                def initialize(options={}) #design initialize to take any argument by taking a hash
                                  options.each do |property, value|
                                    self.send("{property}=",value)
                                  end
                                end

                                # In order to use a class method inside an instance method,
                                # we need to do the following:
                                # self.class.class_method
                                # so to use self.table_name we need to do self.class.table_name
                                def table_name_for_insert #for the instance, we method a way to get table name
                                  self.class.table_name
                                end

                                # insert into #{self.table_name} (#{self.column_names.join(,)})
                                # values (#{})  #this was wrong...
                                # we dont want id inserted so
                                # self.class.column_names.delete_if {|col| col =='id'}.join(", ")
                                def col_names_for_insert
                                  self.class.column_names.delete_if {|col| col=='id'}.join(", ")
                                end

                                #how to gtab attr_accessor values?
                                #attr_accessor methods derived from column names, use column_names
                                #we can invoke the method using send
                                #we push the return value via send unless its nil (like for id)
                                  # values = []
                                  # self.class.column_names.each do |col_name|
                                  #   values << "'#{send(col_name)}'" unless send(col_name).nil?
                                  # end
                                # values -> ["'the name of the song'", "'the album of the song'"]
                                # so we want values.join(", ")
                                def values_for_insert
                                  values = []
                                  self.class.column_names do |col_name|
                                    values << "'#{send(col_name)}'" unless send(col_name).nil?
                                  end
                                  values.join(", ")
                                end

                                def save
                                  # sql = "INSERT INTO table_name () VALUES ()"
                                  sql = "INSERT INTO #{self.table_name_for_insert}
                                    (#{col_names_for_insert}) VALUES (#{values_for_insert})"
                                  DB[:conn].execute(sql)
                                  @id = DB[:conn].execute("SELECT last_insert_rowid() from
                                    #{self.table_name_for_insert}")[0][0]
                                end

                                def self.find_by_name(name)
                                  # sql = "SELECT * FROM table_name where name = ?"
                                  sql = "SELECT * FROM #{self.table_name_for_insert} where name = #{name}"
                                  DB[:conn].execute(sql)
                                end
RACK *****************************************************************
  Rack                  the foundation to rails       
  start rack            rackup config.ru .  in bash
  
  file examples
                        # app/application.rb
                          class Application
                            def call(env)
                              resp = Rack::Response.new                 #start of call
                              req = Rack::Request.new(env)              #
                              resp.write "something to display to page" #like puts
                              resp.finish                               #need at end of call
                            end
                          end
                        #config/environement.rb
                          require_relative '../app/application'
                        #./config.ru
                          require_relative "./config/environment.rb"
                          run Application.new
  parameters
    parse GET params      return them to us in a standard Hash ex: search_term = req.params["q"]
    Rack::Request         provides interface to a Rack environment. stateless, the env passed to the constructor 
                            will be directly modified
                          Rack::Request instance has a ton of useful methods.  Do a lookup
                          EX  req = Rack::Request.new(env)
                              req.post?
                              req.params["data"]  #see also SEARCH below. can use search_term = req.params["q"]
                              req.path            #path wanted by user
    SEARCH:               The section after the ? is called the GET parameters. They come in key/value pairs
                            https://github.com/search?q=apples   q=apples is search and the value is apples                      
  path      
    dynamic paths                                     
                        if req.path.match(/songs/)                        #match the path 
                          song_title = req.path.split("/songs/").last     #turn /songs/Sorry into Sorry
                          song = @@songs.find{|s| s.title == song_title}  #having to do with objects not rack
                          resp.write song.artist                          #writes what it got from song. without having to do if else 
                        end
   status codes
                        Status codes tell something to the client via 3-digit integer 
                        first digit is class of the response, and the remaining two digits represent a specific status. 
                          Status Number 	Code/Description
                          1 	1xx: Informational (request received and continuing process)
                          2 	2xx: Success (request successfully received, understood, and accepted)
                          3 	3xx: Redirection (further action must be taken to complete request)
                          4 	4xx: Client Error (request contains bad syntax and can't be completed)
                          5 	5xx: Server Error (server couldn't complete request)
                          set the response's status code by just setting the status_code attribute. By default, Rack sets a status code of 200
                            ex:
                            if req.path=="/songs"
                              resp.write "You requested the songs"
                            else
                              resp.write "Route not found"
                              resp.status = 404
                            end
 
RAKE *****************************************************************
rake                    like bash for ruby. does presetup or maintenntece work like setup db, reset files etc
rake console
                          desc 'drop into the Pry console'
                          task :console => :environment do
                            Pry.start 
                          end
rake db:migrate         if Student class has a #create_table method, we use that method to build out our own migrate
                          namespace task under the db heading.  it will contain a few common database-related tasks.
                          call task migrate, convention to say we  "migrating" db by applying SQL statements 
                            that alter that database.
                              namespace :db do
                                desc 'migrate changes to your database'
                                task :migrate => :environment do        #creates a task dependency. see task :environment below
                                  Student.create_table
                                end
                              end
                          Student.create_table code  require access to the config/environment.rb file 
                          (which is where the student class and database are loaded), we need to give our task access 
                          to this file. In order to do that, we need to define yet another 
                          Rake task that we can tell to run before the migrate task is run. 
                              task :environment do                      #add this for successfull db migratiion  
                                require_relative './config/environment'
                              end
rake db:seed            run rake db:migrate first!!!!
                        responsible for "seeding" our database with some dummy data.  have a file in the db directory,
                          db/seeds.rb, that contains some code to create instances of your class.  
                            require_relative "../lib/student.rb"
                            Student.create(name: "Melissa", grade: "10th")
                            Student.create(name: "April", grade: "10th")
                            Student.create(name: "Luke", grade: "9th")
                            Student.create(name: "Devon", grade: "11th")
                            Student.create(name: "Sarah", grade: "10th")
                          place in db namespace. see db:migrate for more on db:namespace
                            desc 'seed the database with some dummy data'
                            task :seed do 
                              require_relative './db/seeds.rb'
                            end                          
rake file setup
                        desc 'outputs hello to the terminal'  # what is output when you do rake -t
                        task :hello do                        # call rake hello  to get the output
                          puts "hello from Rake!"
                        end
rake -T                lists commands available from rakefile
rake namespace         namespace just a way to group or contain something, in this case our Rake tasks.
                          namespace :greeting do 
                            desc 'outputs hello to the terminal'
                            task :hello do 
                              puts "hello from Rake!"
                            end
                            desc 'outputs hola to the terminal'
                            task :hola do 
                              puts "hola de Rake!"
                            end
                          end #namespace
                        how to call : rake greeting:hello . ## what you get back :: hello from Rake!
                        how to call : rake greeting:hola. ## what you get back :: hola de Rake!

Now, to use either of our Rake tasks, we use the following syntax:

rake greeting:hello
hello from Rake!

rake greeting:hola
hola de Rake!

RUBY *****************************************************************
ARGUMENTS
              calling methods with parentheses, e.g., greeting('Sophie'). 
                But you can also omit the parentheses: greeting 'Sophie'.
                see also "Hash arguments"
  default/optional    (name = "Ruby programmer"), we simply assign the argument name a default value of "Ruby programmer" 
  hash arguments      aka keyword arguments
                      WHY USE? 
                      If a required keyword argument is missing, Ruby will raise a useful ArgumentError 
                        that tells us which required argument we must include. Dont need read code body
                              #Student.create("Sally","10th")
                              def self.create(name:, grade:)
                                puts "************#{name} #{grade}"   #get .************Sally 10th
                              end #create
  required+optional   def greeting(name, language="Ruby") # required MUST come before optional
  SPLAT       
    splat   *, can be used to convert an array into a list of arguments
             def add(a,b) ;  a + b ;  end  ; pair = [3,7] ;  add *pair #here pair is sent in as 3 and 7 not [3,7]
    multiple assignments
            first, *list = [1,2,3,4]          # first= 1, list= [2,3,4]
            *list, last  = [1,2,3,4]          # list= [1,2,3], last= 4
            first, *center, last = [1,2,3,4]  # first= 1, center= [2,3], last=4

            a = *"Hello"  #=> ["Hello"]  #usues array coersion. see below cannot use .to_a so use this
            "Hello".to_a  #=> NoMethodError: undefined method `to_a' for "Hello":String
            a = *(1..3)   #=> [1, 2, 3]
            a = *[1,2,3]  #=> [1, 2, 3]  

CLASS
  class variable  @@all     accessible to all in class              
  constant        ALL= [] normally unchanging or rarely
  Constructor     instantiate and save. (so the method def self.create /n song=self.new /n song.save end is a constructor
                    good for things like Artist.new_from_url who call constructor to create and save .
  instantiate     make new instance of
  
  Class MODULES     it is not inheritence , ie: using < because we jsut give access to methods, doesnt ean type of something
                    Bmw < Car, bmw is a type of car # . Bmw::SpeedStuff means Bmw gives methods access without saying
                      bme is type of speedtuff
                        class Dancer
                          extend FancyDance::ClassMethods             extend classs methods
                          include FancyDance::InstanceMethods         include instance methods
                        end
  Modules
    class methods     we "extend" classmethods   extend FancyDance::ClassMethods 
                        module Memorable  module ClassMethods  def count  /n self.all.count /n end#count  end#ClassMethods  end#Memorable 
                        class Artist   extend Memorable::ClassMethods  end #artist.  now you can call self.count even though its called count
                            because it is a class method 
    initialize        place it in instance method below.
                        what if there is extra things a particular class needs it's initialie to do? see Super
    instance methods  we "include" instance methods.  same as above without hte self needed to call count. 
    <ClassName>.all     for DRY instance methods use <ClassName>.all to replace specifc items like @@all from init
                        example: def init <ClassName>.all =[] end 
                          we can call self.class.all inside .initialize and it will be just as if we called Song.all or Artist.all
    Super             A method that includes the super keyword will execute any code placed inside the super class' method 
                        of the same name, and then execute any code inside the child class' method.
                          def initialize /n super /n @songs = [] /n end .  in Artists class
                          def initialize /n self.class.all << self /n end . in module
                        
                        
CONFIGURATION   config/environment.rb in run files require only this , instead of each and every file from the lib directory. 
                  As we start to build larger and more complex programs, handle all of our requirements in one place.

DEBUGGING
  errors       see ERRORS below
  pry          gem install pry
               require "pry" on top of code 
               use the following line "binding.pry" anywhere in your code.
                When the interpreter hits that line, your program will actually freeze and your terminal 
                  will turn into a REPL(interpreter like irb)
  .to_stdout   method works by temporarily replacing the $stdout variable.                   


ERRORS
  custom errors           To build a custom error, we define an error class that inherits from the Exception class. 
                            usually inherit from StandardError. Lookup "error class inheritance" for more 
                            ex: class SomeClassName < StandardError end
                                if person.class != Person raise PartnerError 
                            on error: custom_errors.rb:11:in `get_married': Person::PartnerError (Person::PartnerError)
                            with above example: program WONT continue to run. see RESCUE to continue program
  custom messages         use custom errors above, but place message in class for customer message
                            class PartnerError < StandardError
                              def message 
                                "you must give the get_married method an argument of an instance of the person class!"
                              end
                            end  
  rescue program          custom error causes program to stop. use above custom message and rescue to continue program
                              begin
                                raise PartnerError
                              rescue PartnerError => error
                                  puts error.message
                              end

  
FILES  
  !           "shebang line" and it tells the shell which interpreter to use to execute the remainder of the file.
                #!/usr/bin/env ruby  Any executable files we place in our bin directory need to begin with the line
                you can execute your program by typing bin/< your file name > into the command line, 
                  since the shebang line at the top of your executable file is already telling the shell to use Ruby 
                  

LOOPS
  .each       see Types.Array.each
  for         for counter in 1..40 do   /n    puts "The current number is #{counter}."  /nend
              shoe_count = 1..32 /n for shoe in shoe_count /n  puts "I'm putting a pair of shoes away."  /n   end
  loop        simple example
                counter = 0 # Start our counter at 0, we have never run the loop
                loop do # Start our loop
                  counter = counter + 1
                  puts "Iteration #{counter} of the loop"
                  if counter >= 10 # If our counter is 10 or more
                    break # Stop the loop
                  end
                end                
  num.times    5.times do     /n    puts "Penguins like to jump off icebergs!" /n end                 
  while       while counter < 20   /n   puts "The current number is less than 20." /n  counter += 1 end
  until       until counter == 20 /n  puts "The current number is less than 20." /n  counter += 1 end
  
METHODS
  block           a simple form of a closure in Ruby. Blocks are constructed with a do...end or with {}.
  block_given?    method to optionally take block           if block_given? X else Y end
  closure         block of functional code with variables that are bound to the environment that the closure is called in.
                    it can be passed around like an object 
                    can be defined in one scope and be called in a completely different scope,
                    it remembers the variables within its scope at the time of creation; 
                      when it's called, it can access those variables even if they might not be in that current scope
  helper          smaller methods, each of which is responsible for one discrete unit of the game.
  lambda          isn't that much different than a proc in functionality. The & before it turns it into a block,
                   plus_one = lambda { |n| puts n + 1 }; array = [1, 2, 3] ; array.each(&plus_one)
                   ALTERNATE decleration :: plus_one = ->(n) { puts n + 1 }
                  Proc vs Lambda 
                    lambdas check for arguments ; procs just returns nil for the missing argument, but do not throw an error                    they return differently: lambdas return to the calling method and 
                      procs return immediately without going back to the caller—essentially,
                      lambdas behave more like method calls: you can think of them as anonymous functions
                    flow control differences proc vs lambda : the return and break keyword  are treated is the difference 
                      return from proc returns from wrapping method, lamnda woud just continue
                        see https://www.skorks.com/2010/05/ruby-procs-and-lambdas-and-the-difference-between-them/
  proc            is a block turned into an object by being assigned to an instance of the Proc class.
                    Procs are a type of closure , can be assigned to a local variable,
                    is executed by calling the call method on it,  more than one proc can be passed to a method. 
                    greeting = Proc.new { "Hello!" } ; greeting.call => "Hello!"
                  see also lambda
  wrapper/runner  a boss method 
                    ex To run our program, we need to call several  methods. 
                    Instead of calling each of them in turn, we might place them inside a single method. 
                    Then, to enact our program, we only have to invoke our one wrapper, or runner method
  yield           Stop executing the code in this method, and instead execute the code in this block. 
                    Then, return to the code in the method."  
                  if give it an argument, it will pass that argument to the block and 
                    that data will become available to the code in the block.  
                  https://learn.co/tracks/web-development-fundamentals/intro-to-ruby/enumerables/yield-and-blocks
                  
OPERATORS/OPERATIONS

TYPES
  Array
  range       see below 
  .any?       return true if the code in the block evaluates to true for any element in the collection. 
  .collect    see .map
  .delete     Deletes items from self that are equal to obj. If any items are found, returns obj.
  .delete_at  Deletes the element at the specified index, returning that element,  
  .delete_if  delete from the collection any items that return true for a certain condition:
  .detect     similar to .find except Detect returns the first item in the list for which the block returns TRUE 
  .each       iterate over array CHANGES ARRAY!  see .map for non change
  .each_with_index    interate with an index included
  find        see .index()    
  .first
  .flatten    Returns a new array that is a one-dimensional flattening of this array (recursively) [1,[2,3]] => [1,2,3]
  .INCLUDE?   does contain?
  .index()    argument inside the parentheses will return the first index number of an element matching that argument.
                famous_cats.index("Puss in Boots") => 1    # famous_cats = ["Cheshire Cat", "Puss in Boots", "Garfield"]
                see .select for ALL the elements
  .insert     letters.insert(-1, 'd')   #insert d into last position   
  .inspect    returns a string containing a human-readable representation of an object.
  .last
  .map        similar to .each except a new array or hash object is returned, not the original one.
  .pop(2)     can use pop to remove more than one item!!!!!!!!
  .sample     get a random value from array
  .select     returns a new collection containing of  elements in the submitted collection for which
                the block's conditional is true
  .shift(2)   can shift more than one item!!!
  .size       like .length
  .sort       return new array. use sort! to affect current arr
                "spaceship operator" (<=>). The spaceship operator, also called the combined comparison operator
                array.sort do |a, b| /n   a <=> b    /n end; a==b return 0; a<b return -1; a>b return 1
  .reverse
  .uniq       remove duplicate items
  other enumberables    http://ruby-doc.org/core-2.2.2/Enumerable.html
  

  Bool        0 1   true false
    truthy    only nil and false are falsey.   0 is "truthy"
    double-bang operator 
              (!!) will return true or false based on whether a value is truthy or falsey to begin with.

  Hash
        See also SYMBOLS below
        store objects differ from arrays in that they function like dictionaries. 
        hashes are composed of key/value pairs. Each key points to a specific value
          ––just like a word and a definition in a regular dictionary.
          {"i'm a key" => "i'm a value!", "key2" => "value2"}
        Hashes allow us to store named, or associated, data. Think of a dictionary or an address book.  
    =>       symbol, known for this use as the "hash-rocket" (because it looks like a little rocket               
    adding   hashes use the "bracket-equals" method to add data. #hash["new_key"] = "New Value"
              person = { "name" => "Corinna",  "age" => 36} ; person["hometown"] = "Massena, NY"


  Numbers   
          Fixnums are whole numbers, like 7.
          Floats are decimal numbers, like 7.3.
  .ceil     7.5.ceil  => 8
  .floor    7.5.floor   => this method will round the float down to the nearest fixnum. Here it will return 7
   MAth     http://ruby-doc.org/core-2.2.0/Math.html  
              functions like sqrt
  .next     10.next => 11
  
  Range     a set of values with a beginning and an end. A range can contain strings or integers.
            A range of strings: ("a", "b", "c", "d") A range of integers: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
            A range can be constructed using this notation: (100..200) Or this notation: (100...200)
            .. ("double-dot") includes the second number (200) in the range, while using a ... ("triple-dot") excludes it.
            Ranges can be helpful when you are generating arrays which we will be learning more about soon.
    .to_a   method, when called on a range, can convert a range of numbers to an array:
              (1..10).to_a   => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  
  Strings
   array      a = *"Hello"  #=> ["Hello"]  # see RUBY ARGUMENTS SPLAT for more   
  .class      get class of any item.    "hello".class
   heredoc    create a string that runs on to multiple lines. To create a heredoc, we use:
                <<- + name of language contained in our multiline statement + the string, on multiple lines + name of language.
                You don't have to use a heredoc, it's just a helpful tool for crafting long strings  
  .join
  .reverse    "hello".reverse    => "olleh"
  .size       "hello".size    => 5
  .split
  .start_with?  
  .swapcase   "hELLO".swapcase  => "Hello"
  .upcase     "hello".upcase  => "HELLO"

  Time
    Time.now gets current time
    strftime                                    Format as string
                                                Time.now.strftime("%A, %B %d, %Y")          => "Saturday, March 03, 2018"    
                                                %a - The abbreviated weekday name (Sun)
                                                %A - The full weekday name (Sunday)
                                                %b - The abbreviated month name (Jan)
                                                %B - The full month name (January)
                                                %d - Day of the month (01..31)
                                                %e - Day of the month (1..31)
                                                %H - Hour of the day, 24-hour clock (00..23)
                                                %I - Hour of the day, 12-hour clock (01..12)
                                                %l - Hour of the day ()
                                                %j - Day of the year (001..366)
                                                %m - Month of the year (01..12)
                                                %M - Minute of the hour (00..59)
                                                %p - Meridian indicator (AM or PM)
                                                %S - Second of the minute (00..60)
                                                %w - Day of the week (Sunday is 0, 0..6)
                                                %y - Year without a century (00..99)
                                                %Y - Year with century
                                                %Z - Time zone name
                                                %% - Literal % character  
  links                                         https://www.foragoodstrftime.com/                                                

  Symbol
            symbol is a representation of a piece of data. Symbols look like this :my_symbol. 
            If I make a symbol, :my_symbol, and then use that symbol later on in my code,
                my program will refer to the same area of memory in both cases.
    two wats to write
              flatiron_school = {:instructor => "Isaac Newton"}
              flatiron_school = {instructor: "Isaac Newton"}   *****recommend ********
    assign data
              flatiron_school = {   instructors: ["Avi", "Jeff", "Rose"]}  
              instructors = flatiron_school[:instructors]  # => ["Avi", "Jeff", "Rose"]  
    iterate using each
              hash.each do |key, value| /n   puts "#{key}: #{value}" /n end
    .KEYS     returns an array containing all of the keys in the hash that .keys              
    .MIN      return the key/value pair that contains that lowest key, either alphabetically or numerically:
    .to_s     method on a symbol to convert it into a string
    .VALUES   You can collect all of the values in a hash with the .values method:          
    RUBY DOCS http://ruby-doc.org/core-2.2.2/Hash.html

VARIABLES   variables   words or characters that hold values
            don’t hold object values. str doesn’t contain “Hello”. Rather, str contains a reference to a string object. 
              It’s the string object that has the characteristic of containing the letters that make up “Hello”.
  constant    written in UPPERCASE or Capitalized. They have a global scope when defined globally, 
                and local scope when defined within classes and modules. 
                Constants cannot be defined within methods. When constants are initialized, they should not be reassigned.               
                cannot start with a number, be a Ruby reserved word, or have punctuation or space characters.
  Global variables  "global scope". accessed anywhere in a program and are declared with a dollar sign in front   
                      $global_variable
  Local variables   "local scope", meaning that their definitions remain where they are declared.
                      If we define a variable within a method definition, only the method knows about that variable                
  pass-by-value  A variable makes a copy of the value it holds and passes the copy over to something else that 
                  alters or changes it.   
                  ex "hello".upcase
                  Primitive data like integers, floats, fixnums, and symbols require a fixed, small amount of memory. 
                    therefor pass by value                    
  pass-by-reference. changes to a variable would alter what is stored in the actual location it refers to.
                After the process was complete the variable would be holding a new and different value.
                ex x=5                
                 Objects that can grow and change, like arrays and strings, are never a fixed size. 
                  They are instead always accessed by a reference pointer
  range       see RUBY->TYPES
  type        the type of the value a var holds. Ruby is what is known as a dynamically typed language. 
                means the value of a variable can change its type and does not need to be explicitly/permanently defined. 



RSPEC ***************************************************************
  A test is always going to be about setting up a state with a known result and 
  comparing that known result or expectation to the behavior of your program, 
  thus ensuring that your program behaves as you expected.  

ERROR TYPES
  ARGUMENT ERRORS   occur when methods are passed either too few or too many arguments.
  NAME ERRORS       NameErrors are caused when a given name is invalid or undefined
  NO METHOD ERRORS  no method for something
                      will often occur when you have a variable set to nil
  Syntax errors     they're the result of incorrect syntax.
  TYPEERRORS        When you try and do a mathematical operation on two objects of a different type,


Structure
  require_relative '../a.rb'  #loads the code from our actual program file 
  describe "something" do     #we use the describe RSpec method and strings to describe what we are testing. 
                  This code is entirely for you, the programmer, and has very little meaning to RSpec or Ruby.
  it "returns something" do   #to state an expectation or behavior of that method.       
      "" is only there to provide you, the programmer, with a description of what behavior we're currently testing.
      #what is inside the "it do end" block is what we actually test      
  expect(age_of_person).to eq(19)   #expect var to equal value
  Stubbing        refers to the fake implementation of a method.

SHELL ***************************************************************
commands    see https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html
LS
    ls -lah        h is a suffix on the l flag meaning "human readable formats." 
                    a meaning "all information including permissions".
    la -a          show jidden files                
loop    for f in *.txt;do echo $f;done    
open  it will trigger the default action associated with the file type. $ open hello_world.rb
paths
  absolute path 
    points to the same location  regardless of the working directory. They start with / ("forward slash") 
    because that is the root of your file system. This is an absolute path: /Users/avi.
  relative path 
    path relative to the working directory of the user or application, 
    They start with the name of a directory or a file.This is a relative path: avi/Documents.
$PATH  list of directories that BASH will look in for commands, scripts, and programs.  type into shell
    edit .bash_profile to add/remove dirs
pipe    | symbol named "pipe", will send the output of one command into the input of another command.    
        $ ps aux | grep ruby
ps aux  get all processes
pwd   print working dir , get current dir
~     go home dir  , tilda

SINATRA *****************************************************************

 sinatra                 get access to methods like: get and post
  ActiveRecord           see ActiveRecord for sinatra and active record
  cookies                see session below
  install                First, make sure Sinatra is installed by running gem install sinatra in your terminal.
  
  Sinatra CRUD  
                          Create: Model.create
                          Read: Model.all/Model.find(id_number)
                          Update: Model.update
                          Delete: Model.destroy
     create                "create" implemented by building a route/controller action, to render the form for creating 
                            a new instance of your model.
                            get '/model/new' -> new.erb -> form sends a POST request to controller action, post '/models'
                            extracts form data from params and uses it to create a new instance of your model class, 
                            something along the lines of Model.create(some_attribute: params[:some_attribute]).
      read                two ways which we can read data.  all of the instances of a class, or a specific instance of a class.
                            '/models' controller instance variable: @models = Model.all. then renders the index.erb view page
                             index.erb view page will use erb to render all of the instances stored in the @models instance variable.
                             OR
                             get '/models/:id' controller  example, user types in www.yourwebsite.com/models/2, 
                             this route will catch that request and get the id number, in this case 2, from the params. 
                             then find the instance of the model with that id number/set it equal to an instance variable:
                             @model = Model.find(params[:id]). Finally, it will render the show.erb view page.
                             The show.erb view page will use erb to render the @model object.
      update              controller action that renders an update form, and we need a controller action to catch the post 
                            request sent by that form.
                            get 'models/:id/edit' controller action will render the edit.erb view page.
                            edit.erb contain form for editing a given instance of a model. form will send a PATCH request 
                              to patch '/models/:id'.
                            patch '/models/:id' controller action will find the instance of the model to update, using the id
                              from params, update and save that instance.
      update(config.ru)
                            in file config.ru:   use Rack::MethodOverride /n run ApplicationController
                             add a line to your form.
                             <form action="/models/<%= @model.id %>" method="post">
                                <input id="hidden" type="hidden" name="_method" value="patch">
                                <input type="text" ...>
                            </form>
                            MethodOverride middleware will intercept every request sent and received by our application. 
                              If it finds a request with name="_method", it will set the request type based on what is set 
                              in the value attribute, which in this case is patch.
      delete                doesn't get its own view page but is implemented via a "delete button" on the show page of a 
                              given instance. his "delete button", however, isn't really a button; it's a form! 
                              The form should send a DELETE request to delete '/models/:id/delete' 
                              contain only a "submit" button with a value of "delete". That way, appear as only a button
                              <form method="post" action="/models/<%= @model.id %>/delete">
                                <input id="hidden" type="hidden" name="_method" value="DELETE">
                                <input type="submit" value="delete">
                              </form> . #The hidden input field is important to note here. 


        
  file setup and startup
                          app/app.rb
                            require 'sinatra'
                            class App < Sinatra::Base
                              get '/' do
                                "Hello, World!"
                              end
                            end
                          start this web application by running rackup app.rb.   
                          ******** 
                          ./config.ru
                          require 'sinatra'
                          require_relative './app.rb'
                          run Application
                            The class name we defined in our application controller (app.rb) is just a normal Ruby class. 
                            We could have named it MyToDoApp rather than Application  
                            If this was our class name, we would need to change config.ru to run the appropriate class: run MyToDoApp
    file structure mvc    see https://learn.co/tracks/web-development-immersive-2-0-module-two/sinatra/mvc/sinatra-mvc-file-structure
  forms                   #SEE ALSO ERB:HASHES:FORMS
                          to connect the form to our application, give it explicit directions on where and how 
                            to send the data from the user. Both of these pieces of data are attributes that we give  <form>                            
                          <form method="POST" action="/food">
                            method  tells the form what kind of request should be fired to the server
                            action  tells the form what specific route the post request should be 
                          The name attribute of an <input> defines how our app  identify each <input> data.
                          we'll set up a post route: in app.rb
                            post '/food' do
                              # params.to_s #get{"name"=>"Sam", "favorite_food"=>"Green Eggs and Ham"}
                              "My name is #{params[:name]}, and I love #{params[:favorite_food]}"
                            end  
  
  session                 a hash that stores data on the server and passes that data to the client as a cookie. 
    access                access the data stored in the session in the same way you would any hash in Ruby.
    clear                 session.clear in a controller call this to clear the hash. ex: 
                            get '/logout' do 
                              session.clear 
                              "Session has now been cleared. session content: #{session.inspect}"
                            end
    enable                enable sessions within the controller (e.g., app.rb) by adding two lines in the configure block:
                            configure do
                              enable :sessions
                              set :session_secret, "secret" #ncryption key that will be used to create a session_id
                            end
    session example
                            @session = {
                              "session_id"=>  
                                "dd32f512ee239ad74aa6f10c8cad37ce28d6c6922eff252ed641b1017130fe22", 
                              "csrf"=> "040e9777d4dfae03bb1e6498f2a75482", 
                              "tracking"=>{ 
                                "HTTP_USER_AGENT"=> "e193e9e937caa9a19ca483f046281aae77d2216b", 
                                "HTTP_ACCEPT_LANGUAGE"=> "66eae971492938c2dcc2fb1ddc8d7ec3196037da"
                              }
                            }
    session hash           to keep track of a current user throughout a session, we need to set up the session hash to store
                            the user_id in the hash during a controller action. 
                            Since we haven't covered logins and logouts, use the session hash to store the user's name:
                              get '/hey' do 
                                 @session = session
                               end
                             WHEN enabled sessions in our app, every controller action has access to the session hash.
                             store session hash in the instance variable @session so that views will have access to 
                              the session data. 
     session hash modify    modify and add data to the session hash by adding a key-value pair:
                                  get '/hey' do 
                                    session["name"] = "Victoria"
                                    @session = session
                                  end                         
    session_id            string of letters/numbers that is unique to a user's session and is stored in the browser cookie
    

  variables
   EVLUATE VARIABLES      <%= %> . what ever in here is display to user:  <% %> this is used to evaluate but not display
                             example: <% @friends.each do |friend|%>  <h2><%= friend %></h2> <% end%> 
                             each evaluates friendS but is not display. but frienD is displayed to user 
   InStance Variables     Instance variables are ONLY passed from the controller method where they are created to the view 
                            that is rendered, not between controller methods.
                            post '/reverse' do
                              original_string = params["string"]
                              @reversed_string = original_string.reverse
                              erb :reversed
                            end
                            We can now access the contents of @reversed_string inside of our view, reversed.erb.
                            in reversed.erb USE:  <h2><%= @reversed_string %></h2> 
  yeild
                            In layout.erb, add a yield wherever we want the other page to be loaded:
                              Let's say we have a controller action:
                                get '/' do 
                                  erb :index 
                                end
                              When the controller action is triggered and erb method is called, it looks to see if there is a 
                              view titled layout.erb. If that file exists, it loads that content around the desired erb file, 
                              in this case index.erb. review: https://github.com/learn-co-students/sinatra-yield-readme-v-000
  
  Modular Sinatra Pattern 
                          Sinatra is more commonly used through the MSP (over the classical, single file app.rb pattern).
  Shotgun                 small Ruby gem that makes it easier to develop and test Rack-based Ruby web applications locally
                            by starting Rack with automatic code reloading.
                            When start app with shotgun, all of your app code will be reloaded upon every browser connection
    install               gem install shotgun
  
  EXAMPLE:              
                          require_relative 'config/environment'

                          class App < Sinatra::Base
                          get '/' do
                            "Hello World"
                          end

                          get '/reversename/:name' do
                            params[:name].reverse #Victoria->airotciv
                          end

                          get '/square/:number' do
                            STDERR.puts params[:number]
                            x=params[:number].to_i
                            y=x*x
                            y.to_s
                          end

                          get '/say/:number/:phrase' do
                            params[:phrase] * params[:number].to_i
                          end

                          get '/say/:word1/:word2/:word3/:word4/:word5' do
                            "#{params[:word1]} #{params[:word2]} #{params[:word3]} #{params[:word4]} #{params[:word5]}."
                          end

                          get '/:operation/:number1/:number2' do
                            op =  params[:operation]
                            a =   params[:number1].to_i
                            b =   params[:number2].to_i
                            sendback=nil
                            if op == 'subtract'
                              sendback = a-b
                            elsif op == 'add'
                              sendback = a+b
                            elsif op == 'multiply'
                              sendback = a*b
                            elsif op == 'divide'
                              sendback = a / b
                            else
                            end
                            sendback.to_s
                          end  
                          end
  
  
SQL *****************************************************************
 Basics
  SQL statements     terminated with a ";"
  open db            sqlite3 test_sqlite.db
  columns:           are lower case and snake case . this_is_example
  datatypes:         TEXT INTEGER REAL(is float/decimal) BLOB
  files              .sql for sql # .db for database
  
  
 Commands 
    help            .help 
    tables see      .tables
    scehma see      .schema
    quit            .quit

 Language
                          
  create
    create db               create a database pet_database #   sqlite3 pet_database.db   
    create from file        sqlite3 pets_database.db < 01_create_cats_table.sql
    create table            CREATE TABLE table_name;  
                              ex:           CREATE TABLE cats (id INTEGER PRIMARY KEY, name TEXT, age INTEGER);
  change
    change data (table)     INSERT INTO cats (name, age, breed) VALUES ('Maru', 3, 'Scottish Fold');
                              don't need specify the id column values when we insert data. 
                              Primary Key columns are auto-incrementing. 
    change data from file   sqlite3 pets_database.db < 01_insert_cats_into_cats_table.sql                          
    change table(schema)    see Table:alter
  Joins                     see: SQL:relationships:joins below  
  null                      add data with missing values using the NULL keyword.
                              INSERT INTO cats (name, age, breed) VALUES (NULL, NULL, "Tabby");
                              SELECT * FROM cats WHERE name IS NULL;
  output
    alias                   alias or AS #ex: differentt col name ->   SELECT AVG(net_worth) AS average_net_worth FROM cats;
    between                 SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2;
                              SELECT name FROM cats WHERE age BETWEEN 1 AND 3;  
    different colname       see alias
    format output         
                            .header on        # output the name of each column
                              .mode column      # now we are in column mode, enabling us to run the next two .width commands
                              .width auto       # adjusts and normalizes column width
                              .width NUM1, NUM2 # customize column width
    group_by                aggregate function GROUP BY . #   SELECT breed, COUNT(breed) FROM cats GROUP BY breed;
                              formula:  SELECT column_name, aggregate_function(column_name)
                                          FROM table_name WHERE column_name operator value GROUP BY column_name;
                              The GROUP BY() keyword is very similar to ORDER BY(). The only difference is that 
                                ORDER BY() sorts the resulting data set of basic queries while 
                                GROUP BY() sorts the result sets of aggregate functions.
                                group by examples:: https://learn.co/tracks/full-stack-community-bootcamp/sql-structured-query-language/table-relations/grouping-and-sorting-data
     multiple column        SELECT breed, owner_id, COUNT(breed) FROM cats GROUP BY breed, owner_id;
      
    limit                   LIMIT is used to determine the number of records you want to return from a dataset
                              SELECT * FROM cats ORDER BY age DESC LIMIT 1; returns just the first, i.e. oldest, cat on list.
    order_by                his modifier allows us to order the table rows returned by a certain SELECT statement.
                              SELECT column_name FROM table_name ORDER BY column_name ASC|DESC;
      multiple column         SELECT col_name, col_name FROM table_name ORDER BY col_name ASC|DESC, col_name ASC|DESC;
                              SELECT * FROM cats ORDER BY age;
                              see also GROUP_BY above
  schema                    structure of our database (i.e. the tables and their columns + column data types)
  select                    see also output to manilpulate what you get
    select aggregate        see subsection of select below
    select data             SELECT [names of columns we are going to select] FROM [table we are selecting from];
                              SELECT id, name, age, breed FROM cats;
                              SELECT * FROM cats;
    select data conditional   select on condition   
                            SELECT * FROM [table name] WHERE [column name] = [some value];
                              SELECT * FROM cats WHERE name = "Maru";
                              SELECT * FROM cats WHERE age < 2;
                              SELECT COUNT(*) FROM cats WHERE net_worth > 1000000;
    select data unique      SELECT DISTINCT name FROM cats;
    select different tables
                            select from 2 tables in db
                              SELECT cats.name, dogs.name FROM cats, dogs; must use tablename infront of column name

    aggregate functions     functions perform a calculation on specified values, queried from a database table.                        
      select count          the number of records that meet certain condition      
                             "SELECT COUNT([column name]) FROM [table name] WHERE [column name] = [value]"
                              SELECT COUNT(owner_id) FROM cats WHERE owner_id = 1;
                              SELECT COUNT(*) FROM cats WHERE net_worth > 1000000; #get count of cats with > $1,000,000
      select average       SELECT AVG(column_name) FROM table_name;
                              SELECT AVG(net_worth) FROM cats;
      select sum            SELECT SUM(column_name) FROM table_name;
                              SELECT SUM(net_worth) FROM cats;
      select minmax         SELECT MIN(column_name) FROM table_name;
                              SELECT MAX(column_name) FROM table_name;
      having                having is the aggegate equivalent of WHERE. WHERE will not work with aggregates.
                              SELECT employee, SUM(bonus) FROM employee_bonus GROUP BY employee HAVING SUM(bonus) > 1000;
  show
    show scema              .schema 
    show tables             see tables
  tables
    alter                   add a new column, breed, to our cats table.  #ALTER TABLE cats ADD COLUMN breed TEXT;
    create                  see create table
    delete table            DROP TABLE cats;
    show tables             .tables
  update data               UPDATE [table name] SET [column name] = [new value] WHERE [column name] = [value];
                              UPDATE cats SET name = "Hana" WHERE name = "Hannah";

 Relationships - Table relations
  child                     The thing that "belongs to" we'll call the child.  #see also parent
  foriegn key               child gets foreign key column, the value of which is the primary key of that data's/row's parent.
  JOIN                      way to combine rows from two or more tables, based on a common column between them.
                              DIAGRAMs of Joins: https://learn.co/tracks/full-stack-community-bootcamp/sql-structured-query-language/table-relations/sql-complex-joins
                                advanced example:
                                  SELECT column(s)
                                  FROM table_one
                                  INNER JOIN table_two
                                  ON table_one.column_name = table_two.column_name
                                  WHERE table_two.column_name = condition;
    Complex Join            refers to outer joins (right outer join and left outer join and full outer join)                            
    FULL JOIN	              Returns all rows when there is a match in ONE of the tables 
                               SQLite doesn't currently support RIGHT OUTER JOINs or FULL OUTER JOINs #postgress does
                                combine the result of both a LEFT and RIGHT OUTER JOIN. In other words, they will return 
                                  all the data from both the first and second tables.
                              SELECT column_name(s) FROM first_table
                                FULL OUTER JOIN second_table ON first_table.column_name = second_table.column_name;      
    INNER JOIN	            Returns all rows when there is at least one match in BOTH tables
                              SELECT column_name(s) FROM first_table 
                                INNER JOIN second_table ON first_table.column_name = second_table.column_name;
    LEFT JOIN	              Returns all rows from the left table, and the matched rows from the right table
                              meaning returns all rows from the left, or first, table, regardless of whether or not they met 
                                the JOIN condition. The query will also return the matched data from the right, or second,
                                table.
                              SELECT column_name(s) FROM first_table LEFT JOIN second_table
                                ON first_table.column_name=second_table.column_name;
    RIGHT JOIN	            Returns all rows from the right table, and the matched rows from the left table
                               SQLite doesn't currently support RIGHT OUTER JOINs or FULL OUTER JOINs #postgress does
                                return all data from the right, or second, table and the matched data from the left/first table.
                                SELECT column_name(s) FROM first_table
                                  RIGHT JOIN second_table ON first_table.column_name = second_table.column_name;
                               
  parent                    The thing that "has many" is considered to be the parent.  #see also child

YAML ********************************************************************************************
YAML        is used because it is easier for humans to read and write than typing out entire arrays, hashes, etc.
  ex
  commands  require 'yaml' # STEP ONE, REQUIRE YAML!
            # Parse a YAML string
            YAML.load("--- foo") #=> "foo"

            # Emit some YAML
            YAML.dump("foo")     # => "--- foo\n...\n"
            { :a => 'b'}.to_yaml  # => "---\n:a: b\n"
  
  ARRAY     All members of a list are lines beginning at the same indentation level starting with a "- " (a dash and a space):
            # fruits.yml
              - Apple
              - Orange
              - Strawberry
              - Mango
            # ruby file
            require "yaml" 
            fruits = YAML.load_file('fruits.yml')
            fruits             # => ["Apple","Orange","Strawberry","Mango"]
            
            OPTIONAL:: inline format ->  # Shopping list  /n  [milk, pumpkin pie, eggs, juice]
  HASH      # thisisahash.yml
            garfield: Orange
            tom: gray
            #ruby file
            require "yaml"
            cat = YAML.load_file('thisisahash.yml')
            cat # => # { "garfied" => "orange", "tom" => "gray"}
            
             --- # Indented Block
               name: John Smith
               age: 33
             --- # Inline Block
             {name: John Smith, age: 33}
  STRINGS   two ways to write multi-line strings, 
                one preserving newlines (using the | character) 
                one that folds the newlines (using the > character), both followed by a newline character.
  further reading     http://docs.ansible.com/ansible/latest/YAMLSyntax.html
                      http://www.ruby-doc.org/stdlib-1.9.3/libdoc/yaml/rdoc/YAML.html
  
